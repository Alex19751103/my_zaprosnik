Перем обОтладкаВнешнегоЗапроса Экспорт; //флаг того, что запросник открыт для отладки внешнего запроса
Перем обТекущийЗапрос Экспорт; //текущий запрос
Перем обИмяВременногоФайла Экспорт; //имя файла для временного сохранения запросов
Перем обПредставлениеВременногоФайла Экспорт; //имя файла для временного сохранения запросов
Перем обРежимВнешнейОбработки Экспорт;//запросник открыт в режиме внешней обработки
Перем КэшСконвертированныхОбъектов;

Перем ПродолжатьПриОшибке Экспорт;
Перем ЗагружатьВРежимеЗагрузки Экспорт;
Перем ЗагружатьДвижения Экспорт;
Перем НеФорматированныйJSON Экспорт;
Перем СисИнфо Экспорт;

Процедура обПоказатьЗначение(СодержимоеЯчейки,ИмяДанных) Экспорт
	
	Если ТипЗнч(СодержимоеЯчейки) = Тип("ТаблицаЗначений") Тогда
		обПоказатьТаблицуЗначений(СодержимоеЯчейки);
	ИначеЕсли ТипЗнч(СодержимоеЯчейки) = Тип("РезультатЗапроса") Тогда
		обПоказатьТаблицуЗначений(СодержимоеЯчейки.Выгрузить(ОбходРезультатаЗапроса.Прямой));
	ИначеЕсли ТипЗнч(СодержимоеЯчейки) = Тип("МоментВремени") Тогда
		#Если Клиент Тогда
			Предупреждение(СокрЛП(СодержимоеЯчейки.Дата)+ " ; " +СокрЛП(СодержимоеЯчейки.Ссылка),,"Момент времени:");
		#КонецЕсли
	ИначеЕсли ТипЗнч(СодержимоеЯчейки) = Тип("ХранилищеЗначения") Тогда
		Значение = СодержимоеЯчейки.Получить();
		Если Значение <> Неопределено Тогда
			Форма = ПолучитьФорму("ФормаОтображенияДанных");
			Форма.Данные = Значение;
			Форма.ДанныеИмя = ИмяДанных;
			Форма.Открыть();
		КонецЕсли;
	Иначе
		#Если Клиент Тогда
			ОткрытьЗначение(СодержимоеЯчейки);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры //обПоказатьЗначение

//показывает содержимое таблицы значений в отдельной форме
//при модальном открытии возвращает таблицу значений из формы
Функция обПоказатьТаблицуЗначений(Знач ТЗначений, Модально = Ложь) Экспорт
	
	ФормаПоказа = ПолучитьФорму("ТаблицаЗначений");
	ФормаПоказа.ТаблицаЗначений = ?(ТЗначений = Неопределено, Новый ТаблицаЗначений, ТЗначений.Скопировать());
	
	Если Модально Тогда
		ТЗВозврата = ФормаПоказа.ОткрытьМодально();
		Возврат ТЗВозврата;
	Иначе	
		ФормаПоказа.Открыть();
	КонецЕсли; 
	
КонецФункции//обПоказатьТаблицуЗначений

//удаляет из текста запроса всю шнягу которая там при переносе из модуля 
//(палки, кавычки, точки с запятой)
Функция обПропылесоситьТекстЗапроса(ИсходныйТекст) Экспорт
	
	ИсходныйТекст = СокрЛП(ИсходныйТекст);
	
	//вертипалки
	ОбработанныйТекст	=	СтрЗаменить(ИсходныйТекст,"|","");
	
	//открывающая кавычка
	Пока Лев(ОбработанныйТекст,1) = Символ(34) Цикл
		ОбработанныйТекст = Сред(ОбработанныйТекст,2);
		//закрывающая кавычка удаляется только если была открывающая
		//иначе может быть глюк со строковым выражением в запросе
		Пока Прав(ОбработанныйТекст,1) = Символ(34) Цикл
			ОбработанныйТекст = Сред(ОбработанныйТекст,1,СтрДлина(ОбработанныйТекст)-1);
		КонецЦикла; 
	КонецЦикла; 
	//закрывающая точка с запятой
	Если Прав(ОбработанныйТекст,1) = ";" Тогда
		ОбработанныйТекст = Сред(ОбработанныйТекст,1,СтрДлина(ОбработанныйТекст)-1);
	КонецЕсли; 
	
	//двойные кавычки надо заменить на одинарные
	//Строка2Кавычки = Символ(34) + Символ(34);
	//Строка1Кавычка = Символ(34);
	
	//ОбработанныйТекст	=	СтрЗаменить(ОбработанныйТекст,Строка2Кавычки,Строка1Кавычка);
	
	Возврат ОбработанныйТекст;
	
КонецФункции //обПропылесоситьТекстЗапроса

//загружает внешний запрос в строку дерева запросов
//
Функция обПолучитьВнешнийЗапрос(СтрокаДереваЗапросов) Экспорт
	
	СтрокаДереваЗапросов.ТекстЗапроса = обТекущийЗапрос.Текст;
	
	Для каждого ПараметрЗапроса Из обТекущийЗапрос.Параметры Цикл
		
		НовПараметр = СтрокаДереваЗапросов.ПараметрыЗапроса.Добавить();
		НовПараметр.ИмяПараметра = ПараметрЗапроса.Ключ;
		НовПараметр.ЭтоВыражение = Ложь;
		
		Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("Массив") Тогда
			//массив преобразуем в список, чтобы можно было смотреть/править интерактивно
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(ПараметрЗапроса.Значение);
			НовПараметр.ЗначениеПараметра = Список;
		ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("МоментВремени") Тогда	
			
			НовПараметр.МоментВремениДата = ПараметрЗапроса.Значение.Дата;
			НовПараметр.МоментВремениСсылка = ПараметрЗапроса.Значение.Ссылка;	
			
			НовПараметр.ЗначениеПараметра = "Момент времени: " + СокрЛП(НовПараметр.МоментВремениСсылка) + ", дата: " + СокрЛП(НовПараметр.МоментВремениДата);
			
		ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("Граница") Тогда	
			
			НовПараметр.ГраницаЗначение = ПараметрЗапроса.Значение.Значение;
			НовПараметр.ГраницаВид = ПараметрЗапроса.Значение.ВидГраницы;	
			
			НовПараметр.ЗначениеПараметра = "Граница: "+ СокрЛП(НовПараметр.ГраницаЗначение) + ",  " + СокрЛП(НовПараметр.ГраницаВид);
			
		ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("ТаблицаЗначений") Тогда	
			
			НовПараметр.ЗначениеПараметра = "<ТаблицаЗначений> : " + СокрЛП(ПараметрЗапроса.Значение.Количество()) + " стр.";
			НовПараметр.ТаблицаЗначений = ПараметрЗапроса.Значение;	
			
		Иначе
			НовПараметр.ЗначениеПараметра = ПараметрЗапроса.Значение;	
		КонецЕсли;//  
		
	КонецЦикла; 
	
	СтрокаДереваЗапросов.Запрос = "Отладка";
	СтрокаДереваЗапросов.СпособВыгрузки = 1;
	СтрокаДереваЗапросов.СпособВыборки = 1;     
	СтрокаДереваЗапросов.ОбходитьИерархическиеВыборкиРекурсивно = Истина;     
	
КонецФункции //обПолучитьВнешнийЗапрос

//оформление строки результата запроса
//
Процедура обОформитьСтрокуТаблицыРезультата(ОформлениеСтроки) Экспорт
	
	Для каждого Ячейка Из ОформлениеСтроки.Ячейки Цикл
		Если Ячейка.Значение = NULL Тогда
			Ячейка.Текст = "<NULL>";
			Ячейка.ЦветТекста = WebЦвета.Серый;
		ИначеЕсли Ячейка.Значение = Неопределено Тогда	
			Ячейка.Текст = "<Неопределено>";
			Ячейка.ЦветТекста = WebЦвета.Серый;
		ИначеЕсли ТипЗнч(Ячейка.Значение) = Тип("МоментВремени") Тогда	
			Ячейка.Текст = "<МоментВремени>";
			Ячейка.ЦветТекста = WebЦвета.Серый;
		ИначеЕсли ТипЗнч(Ячейка.Значение) = Тип("РезультатЗапроса") Тогда	
			Ячейка.Текст = "<РезультатЗапроса>";
			Ячейка.ЦветТекста = WebЦвета.Серый;
		ИначеЕсли  Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) 
			ИЛИ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) 
			ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение)) 
			ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение))
			ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение))
			ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Ячейка.Значение))
			Тогда
			Если Ячейка.Значение.Пустая() Тогда	    
				Ячейка.Текст = "<пустая ссылка " + ТипЗнч(Ячейка.Значение) + ">";
				Ячейка.ЦветТекста = WebЦвета.Серый;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры //обОформитьСтрокуТаблицыРезультата

//загружает внешний запрос в строку дерева запросов для отладки и открывает форму Запросника
//
Функция ОтладитьЗапрос(Запрос, Знач Модально = Ложь,НовыйСеанс = Ложь) Экспорт
	
	обТекущийЗапрос = Запрос;
	обОтладкаВнешнегоЗапроса = Истина;
	//Если НовыйСеанс Тогда
	//	Connection = Истина;                                                                                  
	//	мТекущееПодключение = Новый COMОбъект("V82.Application");
	//	ТекущаяСтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	//	//Добавим имя пользователя и сбросим пароль для подключения
	//	ТекПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	//	ХэшПароля = ТекПользователь.СохраняемоеЗначениеПароля;
	//	ТекПользователь.Пароль = "";
	//	ТекущаяСтрокаСоединения = ТекущаяСтрокаСоединения + "Usr="""+ТекПользователь.Имя+""";";
	//	
	//	//установим режим запуска - обычное приложение
	//	СтарыйРежим = ТекПользователь.РежимЗапуска;
	//	ТекПользователь.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение;
	//	
	//	Попытка
	//		ТекПользователь.Записать();
	//		Connection = мТекущееПодключение.Connect(ТекущаяСтрокаСоединения);
	//		ТекПользователь.СохраняемоеЗначениеПароля = ХэшПароля;
	//		ТекПользователь.РежимЗапуска = СтарыйРежим;
	//		ТекПользователь.Записать();
	//	Исключение
	//		//вернем пароль в случае неудачи
	//		ТекПользователь.СохраняемоеЗначениеПароля = ХэшПароля;
	//		ТекПользователь.РежимЗапуска = СтарыйРежим;
	//		ТекПользователь.Записать();
	//	КонецПопытки;
	//	мТекущееПодключение.Visible = True;
	//	ОбработкаВОЛЕ = мТекущееПодключение.ВнешниеОбработки.Создать(ИспользуемоеИмяФайла);
	//	ЗапросВДругойБазе = КонвертироватьЗапрос(Запрос,мТекущееПодключение,ОбработкаВОЛЕ);
	//	ОбработкаВОЛЕ.ОтладитьЗапрос(ЗапросВДругойБазе);
	//	ОбработкаВОЛЕ = Неопределено;
	//	ЗапросВДругойБазе = Неопределено;
	//	мТекущееПодключение = Неопределено;
	//	
	//	Возврат Истина;
	
	//КонецЕсли;
	
	Если Модально Тогда
		ПолучитьФорму("Форма").ОткрытьМодально();	
	Иначе	
		ПолучитьФорму("Форма").Открыть();	
	КонецЕсли; 
	
КонецФункции //Отладить
//Создаём такой же запрос в другой базе
Функция КонвертироватьЗапрос(ЗапросИсточник,Подключение,ОбработкаВОЛЕ)
	ЗапросПриёмник = Подключение.NewObject("Query");
	ЗапросПриёмник.Текст = ЗапросИсточник.Текст;
	Для Каждого ПараметрЗапроса Из ЗапросИсточник.Параметры Цикл
		КлючПараметра = ПараметрЗапроса.Ключ;
		
		ЗапросПриёмник.Параметры.Вставить(КлючПараметра,СконвертироватьОбъект(ПараметрЗапроса.Значение,Подключение,ОбработкаВОЛЕ));
		
	КонецЦикла;
	
	ЗапросПриёмник.МенеджерВременныхТаблиц = ПопытатьсяСоздатьМенеджерВТ(ЗапросИсточник,Подключение,ОбработкаВОЛЕ);
	Возврат ЗапросПриёмник;
КонецФункции // КонвертироватьЗапрос()

Функция ПопытатьсяСоздатьМенеджерВТ(ЗапросИсточник,Подключение,ОбработкаВОЛЕ) Экспорт
	Если ЗапросИсточник.МенеджерВременныхТаблиц = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	МенеджерВТ = Подключение.NewObject("МенеджерВременныхТаблиц");
	//Получить все источники данных
	ВременныйТекстЗапроса = Врег(ЗапросИсточник.Текст);
	МассивКлючевыхСлов = Новый Массив;
	МассивКлючевыхСлов.Добавить("ИЗ");
	МассивКлючевыхСлов.Добавить("СОЕДИНЕНИЕ");
	Для Каждого КлючевоеСлово Из МассивКлючевыхСлов Цикл
		Для ВариантПрефикса = 1 по 2 Цикл
			ТекКлючСлово = КлючевоеСлово;
			Если ВариантПрефикса=1 Тогда
				ТекКлючСлово = Символы.ПС + ТекКлючСлово;
			Иначе
				ТекКлючСлово = " " + ТекКлючСлово;
			КонецЕсли;
			Для ВариантПостфикcа = 1 по 2 Цикл
				СловоСПрефиксом = ТекКлючСлово;
				Если ВариантПостфикcа = 1 Тогда
					ОкончательноеСлово = СловоСПрефиксом+" ";
				Иначе
					ОкончательноеСлово = СловоСПрефиксом+Символы.ПС;
				КонецЕсли;
				ВременныйТекстЗапроса = ЗапросИсточник.Текст;
				ЧислоСекций = СтрЧислоВхождений(ЗапросИсточник.Текст,ОкончательноеСлово);
				Для Сч = 1 По ЧислоСекций Цикл
					ВременныйТекстЗапроса = Сред(ВременныйТекстЗапроса,Найти(ВременныйТекстЗапроса,ОкончательноеСлово)+СтрДлина(ОкончательноеСлово),СтрДлина(ВременныйТекстЗапроса));
					ВременныйТекстЗапроса = СокрЛП(ВременныйТекстЗапроса);
					СократитьДоЗначимогоСимвола(ВременныйТекстЗапроса);
					//Следующий пробел или перевод строки
					Пробел = Найти(ВременныйТекстЗапроса," ");
					Перевод = Найти(ВременныйТекстЗапроса,Символы.ПС);
					ТекГраницаНазвания = 999;
					Если Пробел<>0 Тогда
						ТекГраницаНазвания = Пробел;
					КонецЕсли;
					Если Перевод<>0 и ТекГраницаНазвания>Перевод Тогда
						ТекГраницаНазвания = Перевод;
					КонецЕсли;
					НазваниеИсточника = Лев(ВременныйТекстЗапроса,ТекГраницаНазвания-1);
					Если НазваниеИсточника="" Тогда
						Продолжить;
					КонецЕсли;
					Если Лев(НазваниеИсточника,1)="&" или Лев(НазваниеИсточника,1)="(" Тогда
						//ЭтоВТ или временнаятаблица
						Продолжить;
					ИначеЕсли Найти(НазваниеИсточника,".")>0 Тогда
						// это системные таблицы
						Продолжить;
					КонецЕсли;
					ЗапросПолученияДанныхВТ = Новый Запрос;
					ЗапросПолученияДанныхВТ.МенеджерВременныхТаблиц = ЗапросИсточник.МенеджерВременныхТаблиц;
					ЗапросПолученияДанныхВТ.Текст = "Выбрать * Из "+НазваниеИсточника;
					ТЗВременнойТаблицы = ЗапросПолученияДанныхВТ.Выполнить().Выгрузить();
					ЗапросВПриемнике = Подключение.NewObject("Query");
					ЗапросВПриемнике.Текст = "Выбрать * Поместить "+НазваниеИсточника+" Из &ТаблицаЗначений ТЗ";
					ЗапросВПриемнике.МенеджерВременныхТаблиц = МенеджерВТ;
					ЗапросВПриемнике.УстановитьПараметр("ТаблицаЗначений",СконвертироватьОбъект(ТЗВременнойТаблицы,Подключение,ОбработкаВОЛЕ));
					ЗапросВПриемнике.Выполнить();
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Возврат МенеджерВТ;
КонецФункции // ПопытатьсяСоздатьМенеджерВТ()

Процедура СократитьДоЗначимогоСимвола(ТекстЗапроса)
	Пока Истина Цикл
		ТекСимвол = Лев(ТекстЗапроса,1);
		Если ТекСимвол="" Тогда
			Возврат;
		ИначеЕсли ТекСимвол = " " 
			Или ТекСимвол = Символы.ПС Тогда
			ТекстЗапроса = Сред(ТекстЗапроса,2,СтрДлина(ТекстЗапроса));
		Иначе
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры // СократитьДоЗначимогоСимвола()

Функция СконвертироватьОбъект(ЗначениеИсточника,Подключение,ОбработкаВОЛЕ)
	Если КэшСконвертированныхОбъектов.Получить(ЗначениеИсточника)<>Неопределено Тогда
		Возврат КэшСконвертированныхОбъектов.Получить(ЗначениеИсточника)
	КонецЕсли;
	ЗначениеПр = Неопределено;
	//Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеИсточника)) Тогда
	//	Гуид = ЗначениеИсточника.УникальныйИдентификатор();
	//	ГуидОле = Подключение.NewObject("UUID",СокрЛп(Гуид));
	//	ЗначениеПр = Подключение.Справочники[ЗначениеИсточника.Метаданные().Имя].ПолучитьСсылку(ГуидОле);
	//Иначе
	//Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеИсточника)) Тогда
	//	Гуид = ЗначениеИсточника.УникальныйИдентификатор();
	//	ГуидОле = Подключение.NewObject("UUID",СокрЛп(Гуид));
	//	ЗначениеПр = Подключение.Документы[ЗначениеИсточника.Метаданные().Имя].ПолучитьСсылку(ГуидОле) ;
	//ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеИсточника)) Тогда
	//	Гуид = ЗначениеИсточника.УникальныйИдентификатор();
	//	ГуидОле = Подключение.NewObject("UUID",СокрЛп(Гуид));
	//	ЗначениеПр = Подключение.Документы[ЗначениеИсточника.Метаданные().Имя].ПолучитьСсылку(ГуидОле);
	//ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеИсточника)) Тогда
	//	Гуид = ЗначениеИсточника.УникальныйИдентификатор();
	//	ГуидОле = Подключение.NewObject("UUID",СокрЛп(Гуид));
	//	ЗначениеПр = Подключение.ПланыСчетов[ЗначениеИсточника.Метаданные().Имя].ПолучитьСсылку(ГуидОле);
	
	//Иначе
	Если ТипЗнч(ЗначениеИсточника) = Тип("Строка") 
		или ТипЗнч(ЗначениеИсточника) = Тип("Число")
		или ТипЗнч(ЗначениеИсточника) = Тип("Дата") Тогда
		ЗначениеПр = ЗначениеИсточника;
		//ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеИсточника)) Тогда
		//ИмяПеречисления = ЗначениеИсточника.Метаданные().Имя;
		//ЗначениеПр = Подключение.Перечисления[ЗначениеИсточника.Метаданные().Имя][ИмяПеречисления];
	ИначеЕсли ТипЗнч(ЗначениеИсточника) = Тип("Массив") Тогда
		ЗначениеПр = Подключение.NewObject("Массив");
		Для Каждого ЭлементКоллекцииИст Из ЗначениеИсточника Цикл
			ЗначениеПр.Добавить(СконвертироватьОбъект(ЭлементКоллекцииИст,Подключение,ОбработкаВОЛЕ));
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЗначениеИсточника) = Тип("СписокЗначений") Тогда
		ЗначениеПр = Подключение.NewObject("СписокЗначений");
		Для Каждого ЭлементКоллекцииИст Из ЗначениеИсточника Цикл
			ЗначениеПр.Добавить(СконвертироватьОбъект(ЭлементКоллекцииИст,Подключение,ОбработкаВОЛЕ));
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЗначениеИсточника) = Тип("ТаблицаЗначений") Тогда
		ЗначениеПр = Подключение.NewObject("ТаблицаЗначений");
		Для Каждого Колонка Из ЗначениеИсточника.Колонки Цикл
			ИспользуемыеТипы = Колонка.ТипЗначения.Типы();
			МассивТипов = СконвертироватьОбъект(ИспользуемыеТипы,Подключение,ОбработкаВОЛЕ);
			ОписаниеТиповПр = Подключение.NewObject("ОписаниеТипов",МассивТипов);
			ЗначениеПр.Колонки.Добавить(Колонка.Имя,ОписаниеТиповПр);
		КонецЦикла;
		Для Каждого СтрокаТЗ Из ЗначениеИсточника Цикл
			НоваяСтрока = ЗначениеПр.Добавить();
			Для Каждого Колонка Из ЗначениеИсточника.Колонки Цикл
				НоваяСтрока[Колонка.Имя] = СконвертироватьОбъект(СтрокаТЗ[Колонка.Имя],Подключение,ОбработкаВОЛЕ);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЗначениеИсточника) = Тип("МоментВремени") Тогда
		ЗначениеПр = Подключение.NewObject("МоментВремени",ЗначениеИсточника.Дата,
		СконвертироватьОбъект(ЗначениеИсточника.Ссылка,Подключение,ОбработкаВОЛЕ));
	ИначеЕсли ТипЗнч(ЗначениеИсточника) = Тип("Граница") Тогда
		ЗначениеПр = Подключение.NewObject("Граница",СконвертироватьОбъект(ЗначениеИсточника.Значение,Подключение,ОбработкаВОЛЕ),
		СконвертироватьОбъект(ЗначениеИсточника.ВидГраницы,Подключение,ОбработкаВОЛЕ));
		
	ИначеЕсли ТипЗнч(ЗначениеИсточника) = Тип("Тип") Тогда
		ТипВXML = XMLТип(ЗначениеИсточника);
		ЗначениеПр = ОбработкаВОЛЕ.ПолучитьТипПриёмника(ТипВXML.ИмяТипа,ТипВXML.URIПространстваИмен);
	ИначеЕсли ТипЗнч(ЗначениеИсточника) = Тип("ВидГраницы") Тогда
		ЗначениеПр = Подключение.ВидГраницы[Строка(ЗначениеИсточника)]
	Иначе
		//попробуем тупо через xml
		ТипВОле = СконвертироватьОбъект(ТипЗнч(ЗначениеИсточника),Подключение,ОбработкаВОЛЕ);
		Если ТипВОле<>Неопределено Тогда
			ЗначениеПр = Подключение.XMLЗначение(ТипВОле,XMLСтрока(ЗначениеИсточника));
		КонецЕсли;
	КонецЕсли;
	КэшСконвертированныхОбъектов.Вставить(ЗначениеИсточника,ЗначениеПр);
	Возврат ЗначениеПр;
КонецФункции // СконвертироватьОбъект()()

Функция ПолучитьТипПриёмника(ИмяТипа,ПространствоИмен) Экспорт
	Возврат ИзXMLТипа(ИмяТипа,ПространствоИмен);
КонецФункции

//возвращает массив имен временных таблиц, формирующихся в запросе по тексту запроса
//
Функция обПолучитьВременныеТаблицыИзТекстаЗапроса(ТекстДляОбработки) Экспорт
	
	МассивВозврата = Новый Массив;
	
	ПакетЗапросов = Новый Массив;
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.IgnoreCase = Истина;
	RegExp.Global = Истина; 
	RegExp.MultiLine = Истина;
	
	RegExp.Pattern = "[^""]//.*$";
	ТекстДляОбработки = RegExp.Replace(ТекстДляОбработки, "");
	
	RegExp.MultiLine = False;
	//RegExp.Pattern = "(ВЫБРАТЬ)[^;]*";
	RegExp.Pattern = "((ВЫБРАТЬ)[^;]*|(УНИЧТОЖИТЬ)[^;]*)";
	MC = RegExp.Execute(ТекстДляОбработки);
	Для Каждого M Из MC Цикл
		ПакетЗапросов.Добавить(M.Value);
	КонецЦикла;
	
	RegExp.Pattern = "((ПОМЕСТИТЬ)\s+[^;\s]*)";
	
	НомерЗапроса = 1;
	
	ВремяВыполнения = 0; //общее время выполнения запроса
	
	Для Каждого ТекЗапрос Из ПакетЗапросов Цикл
		
		ЭтоВременная = Ложь;
		MC = RegExp.Execute(ТекЗапрос);
		Для Каждого M Из MC Цикл
			ИмяТаблицы = СокрЛП(Сред(СокрЛП(M.Value),11));
			ЭтоВременная = Истина;
			Прервать;
		КонецЦикла;
		
		Если ЭтоВременная Тогда
			
			МассивВозврата.Добавить(ИмяТаблицы);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	RegExp = Неопределено;
	
	Возврат МассивВозврата;
	
КонецФункции //обПолучитьВременныеТаблицыИзТекстаЗапроса

//вывод сообщения на клиенте
//
Процедура обСообщитьПользователюНаКлиенте(ТекстСообщения) Экспорт
	
	#Если Клиент Тогда
		Сообщить(ТекстСообщения);		
	#КонецЕсли
	
КонецПроцедуры //обСообщитьПользователюНаКлиенте

Функция Дамп(Запрос) Экспорт
	СтруктураДампа = Новый Структура;
	СтруктураДампа.Вставить("ИБ",СтрокаСоединенияИнформационнойБазы());
	СтруктураДампа.Вставить("ТекстЗапроса",Запрос.Текст);
	СтруктураДампа.Вставить("Параметры",Запрос.Параметры);
	МассивВТ = ПолучитьМассивВТ(Запрос.Текст);
	СекцииЗапроса = ПолучитьМассивТекстовЗапросов(Запрос.Текст);
	МассивСоздаваемыхВТ = Новый Массив;
	Для Каждого СекцияЗапроса Из СекцииЗапроса Цикл
		Если Найти(Врег(СекцияЗапроса),"ПОМЕСТИТЬ")>0 Тогда
			МассивСоздаваемыхВТ.Добавить(ПолучитьИмяВТ(СекцияЗапроса));
		КонецЕсли;
	КонецЦикла;
	СтруктураМенеджераВТ = Новый Структура;
	Для Каждого ВТ Из МассивВТ Цикл
		НашласьВТ = Ложь;
		Для Каждого СоздаваемаяВт Из МассивСоздаваемыхВТ Цикл
			Если Врег(СоздаваемаяВт) = Врег(ВТ) Тогда
				НашласьВт = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НашласьВТ Тогда
			Продолжить;
		КонецЕсли;
		//если не создаётся, то надо запомнить
		Если НЕ СтруктураМенеджераВТ.Свойство(ВТ) Тогда
			ЗапросДляВт = Новый Запрос;
			ЗапросДляВт.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
			ЗапросДляВт.Текст = "Выбрать * Из "+ВТ;
			ТЗВТ = ЗапросДляВт.Выполнить().Выгрузить();
			СтруктураМенеджераВТ.Вставить(ВТ,ТЗВТ);
		КонецЕсли;
	КонецЦикла;
	ИмяДампа = ПолучитьИмяВременногоФайла("sdmp");
	СтруктураДампа.Вставить("МенеджерВТ",СтруктураМенеджераВТ);
	ЗначениеВФайл(ИмяДампа,СтруктураДампа);
	Возврат "Дамп успешно сохранён!";
КонецФункции // Дамп()

Функция ПолучитьМассивВТ(ЗапросИсточник) Экспорт
	//Получить все источники данных
	ВременныйТекстЗапроса = Врег(ЗапросИсточник);
	ТекстБезВрег = ЗапросИсточник;
	
	МассивВТ = Новый Массив;
	МассивКлючевыхСлов = Новый Массив;
	МассивКлючевыхСлов.Добавить("ИЗ");
	МассивКлючевыхСлов.Добавить("СОЕДИНЕНИЕ");
	Для Каждого КлючевоеСлово Из МассивКлючевыхСлов Цикл
		Для ВариантПрефикса = 1 по 3 Цикл
			ТекКлючСлово = КлючевоеСлово;
			Если ВариантПрефикса=1 Тогда
				ТекКлючСлово = Символы.ПС + ТекКлючСлово;
			ИначеЕсли ВариантПрефикса = 2 Тогда
				ТекКлючСлово = " " + ТекКлючСлово;
			ИначеЕсли ВариантПрефикса = 3 Тогда
				ТекКлючСлово = "	"+ТекКлючСлово;
			КонецЕсли;
			Для ВариантПостфикcа = 1 по 2 Цикл
				СловоСПрефиксом = ТекКлючСлово;
				Если ВариантПостфикcа = 1 Тогда
					ОкончательноеСлово = СловоСПрефиксом+" ";
				Иначе
					ОкончательноеСлово = СловоСПрефиксом+Символы.ПС;
				КонецЕсли;
				ВременныйТекстЗапроса = Врег(ЗапросИсточник);
				ТекстБезВрег = ЗапросИсточник;
				
				ЧислоСекций = СтрЧислоВхождений(ВременныйТекстЗапроса,ОкончательноеСлово);
				Для Сч = 1 По ЧислоСекций Цикл
					ТекстБезВрег = Сред(ТекстБезВрег,Найти(ВременныйТекстЗапроса,ОкончательноеСлово)+СтрДлина(ОкончательноеСлово),СтрДлина(ВременныйТекстЗапроса));
					ВременныйТекстЗапроса = Сред(ВременныйТекстЗапроса,Найти(ВременныйТекстЗапроса,ОкончательноеСлово)+СтрДлина(ОкончательноеСлово),СтрДлина(ВременныйТекстЗапроса));
					ВременныйТекстЗапроса = СокрЛП(ВременныйТекстЗапроса);
					ТекстБезВрег = СокрЛП(ТекстБезВрег);
					СократитьДоЗначимогоСимвола(ВременныйТекстЗапроса);
					СократитьДоЗначимогоСимвола(ТекстБезВрег);
					НайденныйСимвол = 9999999;
					
					//Следующий пробел или перевод строки
					МассивСимволовКонцаВТ = Новый Массив;
					МассивСимволовКонцаВТ.Добавить(" ");
					МассивСимволовКонцаВТ.Добавить("	");
					МассивСимволовКонцаВТ.Добавить(Символы.ПС);
					МассивСимволовКонцаВТ.Добавить(";");
					МассивСимволовКонцаВТ.Добавить(")");
					
					Для Каждого ПоследнийСимвол Из МассивСимволовКонцаВТ Цикл
						ОчереднойСимвол = Найти(ТекстБезВрег,ПоследнийСимвол);
						Если ОчереднойСимвол>0 Тогда
							Если НайденныйСимвол>ОчереднойСимвол Тогда
								НайденныйСимвол = ОчереднойСимвол;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					НазваниеИсточника = Лев(ТекстБезВрег,НайденныйСимвол-1);
					Если НазваниеИсточника="" Тогда
						Продолжить;
					КонецЕсли;
					Если Лев(НазваниеИсточника,1)="&" или Лев(НазваниеИсточника,1)="(" Тогда
						//ЭтоВТ или вложенныйзапрос
						Продолжить;
					ИначеЕсли Найти(НазваниеИсточника,".")>0 или Врег(НазваниеИсточника)="КОНСТАНТЫ" Тогда
						// это системные таблицы
						Продолжить;
					КонецЕсли;
					Найдено = Неопределено;
					Для Каждого ТекВТ из МассивВТ Цикл
						Если Врег(ТекВТ) = Врег(НазваниеИсточника) Тогда
							Найдено = ТекВТ;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Найдено=Неопределено Тогда
						МассивВТ.Добавить(НазваниеИсточника);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Возврат МассивВТ;
КонецФункции // ПопытатьсяСоздатьМенеджерВТ()
Функция ПолучитьИмяВТ(ТекЗапрос)
	ТекстПарсинга = Врег(ТекЗапрос);
	ТекстПарсингаБезВрег = ТекЗапрос;
	ПервыйСимвол = Найти(ТекстПарсинга,"ПОМЕСТИТЬ");
	ТекстПарсинга = Сред(ТекстПарсинга,ПервыйСимвол+СтрДлина("Поместить")+1,СтрДлина(ТекстПарсинга));
	ТекстПарсингаБезВрег = Сред(ТекстПарсингаБезВрег,ПервыйСимвол+СтрДлина("Поместить")+1,СтрДлина(ТекстПарсингаБезВрег));
	ТекстПарсинга = СокрЛП(ТекстПарсинга);
	ТекстПарсингаБезВрег = СокрЛП(ТекстПарсингаБезВрег);
	НайденныйСимвол = СтрДлина(ТекстПарсинга);
	МассивСимволовКонцаВТ = Новый Массив;
	МассивСимволовКонцаВТ.Добавить(" ");
	МассивСимволовКонцаВТ.Добавить("	");
	МассивСимволовКонцаВТ.Добавить(Символы.ПС);
	МассивСимволовКонцаВТ.Добавить(";");
	МассивСимволовКонцаВТ.Добавить(")");
	Для Каждого ПоследнийСимвол Из МассивСимволовКонцаВТ Цикл
		ОчереднойСимвол = Найти(ТекстПарсинга,ПоследнийСимвол);
		Если ОчереднойСимвол>0 Тогда
			Если НайденныйСимвол>ОчереднойСимвол Тогда
				НайденныйСимвол = ОчереднойСимвол;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Лев(ТекстПарсингаБезВрег,НайденныйСимвол-1)
	
КонецФункции // ПолучитьИмяВТ()

Функция ПолучитьМассивТекстовЗапросов(ТекстИзначальный)
	ТекстПарсинга = Врег(ТекстИзначальный);
	ТекстБезВрег = ТекстИзначальный;
	МассивЗапросов = Новый Массив;
	КоличествоЗапросовВПакете = СтрЧислоВхождений(ТекстИзначальный,";")+1;
	Для Сч = 1 По КоличествоЗапросовВПакете Цикл
		ТекКонец = Найти(ТекстПарсинга,";");
		Если ТекКонец = 0 Тогда
			Если (Найти(Врег(ТекстПарсинга),"ВЫБРАТЬ")>0 или Найти(Врег(ТекстПарсинга),"УНИЧТОЖИТЬ")>0) Тогда
				МассивЗапросов.Добавить(ТекстБезВрег);
			КонецЕсли;
		Иначе
			СледующийТекст = Сред(ТекстБезВрег,1,ТекКонец);
			МассивЗапросов.Добавить(СледующийТекст);
			ТекстПарсинга = Сред(ТекстПарсинга,СтрДлина(СледующийТекст)+1,СтрДлина(ТекстПарсинга));
			ТекстБезВрег = Сред(ТекстБезВрег,СтрДлина(СледующийТекст)+1,СтрДлина(ТекстБезВрег));;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивЗапросов;
КонецФункции // ПолучитьМассивТекстовЗапросов()

//pesenkov++ 2018-07-27 Задача №
#Область ВнутреннийФормат1С
Функция ПолучитьСоответствиеЗамены() Экспорт
	
	СоответствиеТипов = Новый ТаблицаЗначений;
	СоответствиеТипов.Колонки.Добавить("Имя");
	СоответствиеТипов.Колонки.Добавить("Значение");
	
	ЗапросТекстИтог = "";
	
	Для каждого стр Из Метаданные.Справочники Цикл
		ЗапросТекст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка,
		|	""<Имя>"" КАК Имя
		|ИЗ
		|	<Имя>
		|ОБЪЕДИНИТЬ ВСЕ
		|/////////////////////////////
		|";
		ЗапросТекст = СтрЗаменить(ЗапросТекст, "<Имя>", "Справочник." + стр.Имя);
		
		ЗапросТекстИтог = ЗапросТекстИтог + ЗапросТекст;
		
	КонецЦикла;
	
	Для каждого стр Из Метаданные.Документы Цикл
		ЗапросТекст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка,
		|	""<Имя>"" КАК Имя
		|ИЗ
		|	<Имя>
		|ОБЪЕДИНИТЬ ВСЕ
		|/////////////////////////////
		|";
		ЗапросТекст = СтрЗаменить(ЗапросТекст, "<Имя>", "Документ." + стр.Имя);
		
		ЗапросТекстИтог = ЗапросТекстИтог + ЗапросТекст;
		
	КонецЦикла;
	
	ЗапросТекстИтог = Лев(ЗапросТекстИтог,СтрДлина(ЗапросТекстИтог) - 45);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ЗапросТекстИтог;
	ТЗ = Запрос.Выполнить().Выгрузить();   
	
	Для каждого стр Из ТЗ Цикл
		//"{"#",0b5f521e-459d-4962-86a6-f3a45fe61010,34:810100155d08eb1f11e7e01fe335f24f}"
		Значение = ЗначениеВСтрокуВнутр(стр.Ссылка);
		раз = Найти(Значение,":");
		НоваяСтрока = СоответствиеТипов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,стр);
		НоваяСтрока.Значение = Сред(Значение,6,раз - 6);
	КонецЦикла; 
	
	Возврат СоответствиеТипов;
	
КонецФункции
#КонецОбласти

#Область Алгоритмы
Функция ПолучитьАлгоритмИзМакета(ТекстЗаголовка = "") Экспорт
	Возврат ПолучитьМакет("МакетАлгоритмов").ПолучитьТекст();
КонецФункции
#КонецОбласти

#Область СведенияОВнешнейОбработке
Функция СведенияОВнешнейОбработке() Экспорт
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование", "Запросник 3.0.1");
	ПараметрыРегистрации.Вставить("Версия", "3.0.1");
	ПараметрыРегистрации.Вставить("Информация", "Мощный инструмент для отладки запросов");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");
	ПараметрыРегистрации.Вставить("БезопасныйРежим",Ложь);
	Команды = ТаблицаКоманд();
	ДобавитьКоманду(Команды,
	"Запросник 3.0",
	"ОткрытьЗапросник",
	"ОткрытиеФормы",
	Ложь,
	Неопределено);
	ПараметрыРегистрации.Вставить("Команды", Команды);
	Возврат ПараметрыРегистрации;
КонецФункции
Функция ТаблицаКоманд()
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды;
КонецФункции
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры
#КонецОбласти

#Область JSON
//++Работа через JSON
Функция ОбъектЗаписать(ВходныеДанные)
	
	Объект = ВходныеДанные.Объект;
	
	СтруктураВозврата =  Новый Структура("Успех,ОписаниеОшибки,Ссылка,ТипОбъекта",Ложь,"");
	Объект.Обменданными.Загрузка = ВходныеДанные.ал_ЗагружатьВРежимеЗагрузки;
	
	Если ВходныеДанные.ЭтоДвижение Тогда
		Если ВходныеДанные.ал_ВыгружатьДвижения Тогда
			
			Если  ВходныеДанные.ал_НеЗаменятьСуществующие Тогда
			Иначе	
				Попытка
					Объект.Записать();
					СтруктураВозврата.Успех = Истина;
				Исключение
					СтруктураВозврата.ОписаниеОшибки = ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
		Иначе
			СтруктураВозврата.ОписаниеОшибки = "Движение не загружали";
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ВходныеДанные.ЭтоДвижение Тогда
		
		Если ВходныеДанные.ал_НеЗаменятьСуществующие И НЕ Объект.ЭтоНовый() Тогда
		Иначе	
			Попытка
				Объект.Записать();
				СтруктураВозврата.Успех = Истина;
			Исключение
				СтруктураВозврата.Успех = Ложь;
				СтруктураВозврата.ОписаниеОшибки = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если НЕ ВходныеДанные.ЭтоДвижение И СтруктураВозврата.Успех = Ложь И ВходныеДанные.ал_ПродолжатьПриОшибке Тогда
		
		СтруктураВозврата.ОписаниеОшибки = "";
		
		Если ВходныеДанные.ЭтоДокумент Тогда
			Объект.УстановитьНовыйНомер();
		Иначе
			Объект.УстановитьНовыйКод();
		КонецЕсли;
		
		Попытка
			Объект.Записать();
			СтруктураВозврата.Успех = Истина;
		Исключение
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
	
	Если  НЕ ВходныеДанные.ЭтоДвижение И ВходныеДанные.ал_УдалитьНепосредственно Тогда 
		
		Объект = ВходныеДанные.Объект.Ссылка.ПолучитьОбъект();
		СтруктураВозврата.Ссылка = Объект.Ссылка;
		Если ВходныеДанные.ЭтоДокумент Тогда
			Движения = Объект.Движения;
			Для каждого Движение Из Движения Цикл
				Движение.Прочитать();
				Если Движение.Количество() > 0 Тогда
					Движение.Очистить();	
					Движение.Записать();
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		Попытка
			Объект.Удалить();
			СтруктураВозврата.Успех = Истина;
		Исключение
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.ОписаниеОшибки = СтруктураВозврата.ОписаниеОшибки + " " + ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
	
	СтруктураВозврата.Ссылка = ?(ВходныеДанные.ЭтоДвижение,Объект.Отбор.Регистратор.Значение,Объект.Ссылка);
	СтруктураВозврата.ТипОбъекта = Строка(ТипЗнч(Объект));
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ОбъектыВJSON(ВходныеДанные) Экспорт
	
	ТекстJSON = "";
	МассивОбъектов = Новый Массив;
	ЗагружатьДвижения = ВходныеДанные.ал_ВыгружатьДвижения;
	НеФорматированныйJSON = ВходныеДанные.ал_НеФорматированныйJSON;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ХранилищеСтруктурыТипов) Тогда
		ЗаполнитьСтруктуруТипов();
	КонецЕсли; 
	СтруктураТипов = ЭтотОбъект.ХранилищеСтруктурыТипов.Получить();
	
	МассивСсылок = ВходныеДанные.МассивСсылок;
	Для сч = 0 по МассивСсылок.Количество() - 1 Цикл
		
		Попытка		
			Объект = МассивСсылок[сч].ПолучитьОбъект();
		Исключение
		КонецПопытки;
		
		Если Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НеФорматированныйJSON Тогда
			Если СтруктураТипов.СоответствиеХМЛ.Получить(ТипЗнч(МассивСсылок[сч]))<>Неопределено и ЗначениеЗаполнено(МассивСсылок[сч]) Тогда
				МассивОбъектов.Добавить(Объект);
				Если ЗагружатьДвижения И Метаданные.Документы.Содержит(Объект.Метаданные()) Тогда
					Движения = Объект.Движения;
					Для каждого Движение Из Движения Цикл
						Движение.Прочитать();
						Если Движение.Количество() > 0 Тогда
							МассивОбъектов.Добавить(Движение);
						КонецЕсли; 
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			МассивОбъектов.Добавить(Объект);
			Если ЗагружатьДвижения И Метаданные.Документы.Содержит(Объект.Метаданные()) Тогда
				Движения = Объект.Движения;
				Для каждого Движение Из Движения Цикл
					Движение.Прочитать();
					Если Движение.Количество() > 0 Тогда
						МассивОбъектов.Добавить(Движение);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если НеФорматированныйJSON Тогда
		ТекстJSON = JSON(МассивОбъектов,СтруктураТипов);
	Иначе
		ТекстJSON = СериализаторJSON(МассивОбъектов);
	КонецЕсли;
	
	Возврат ТекстJSON;
	
КонецФункции

Функция JSONВОбъекты(ВходныеДанные) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС20 = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(50));
	ОписаниеТиповС250 = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(250));
	
	ТекстJSON = ВходныеДанные.ал_ТекстJSON;
	//ВходныеДанные.ал_ТекстJSON = Неопределено;
	
	ТЗ = Новый ТаблицаЗначений;
	Колонки = ТЗ.Колонки;
	Колонки.Добавить("Успех");
	Колонки.Добавить("Ссылка");
	Колонки.Добавить("ТипОбъекта",ОписаниеТиповС20,,20);
	Колонки.Добавить("ОписаниеОшибки",ОписаниеТиповС250,,100);
	
	Если ВходныеДанные.ал_НеФорматированныйJSON Тогда
		
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ХранилищеСтруктурыТипов) Тогда
			ЗаполнитьСтруктуруТипов();
		КонецЕсли; 
		СтруктураТипов = ЭтотОбъект.ХранилищеСтруктурыТипов.Получить();
		
		Значение = Неопределено;
		МассивОбъектов = Новый Массив;
		
		Если UnJSON(ТекстJSON,СтруктураТипов,Значение)=0 Тогда
			Если ТипЗнч(Значение)=Тип("Массив") Тогда
				
				Для каждого Элемент Из Значение Цикл				
					Если СтруктураТипов.СоответствиеОбъектов.Получить(ТипЗнч(Элемент)) <> Неопределено Тогда
						МассивОбъектов.Добавить(Элемент);
					КонецЕсли; 
				КонецЦикла; 	
				//СгруппироватьТипыИВывестиСообщение
				СтруктураОтсутствующихТипов = Новый Структура;
				Для каждого ОтсутствующийТип Из СтруктураТипов.МассивОтсутствующихТипов Цикл
					СтруктураОтсутствующихТипов.Вставить(СтрЗаменить(ОтсутствующийТип,".",""),ОтсутствующийТип);
				КонецЦикла; 
				Для каждого ОтсутствующийТип Из СтруктураОтсутствующихТипов Цикл
					Сообщить("Не найден тип данных "+ОтсутствующийТип.Значение);
				КонецЦикла; 
			Иначе
				Сообщить("Преобразование не удалось");
			КонецЕсли; 
			
		КонецЕсли;
		
	Иначе
		МассивОбъектов = ДесерилизаторJSON(ТекстJSON);
	КонецЕсли;	
	
	Для сч = 0 по МассивОбъектов.Количество() - 1 Цикл
		
		Объект = МассивОбъектов[сч];
		
		МД = Объект.Метаданные();
		ЭтоДокумент = Метаданные.Документы.Содержит(МД);
		ЭтоДвижение = Метаданные.РегистрыНакопления.Содержит(МД) ИЛИ 
		Метаданные.РегистрыБухгалтерии.Содержит(МД) ИЛИ
		Метаданные.РегистрыСведений.Содержит(МД);
		
		ВходныеДанные.Вставить("Объект",Объект);
		ВходныеДанные.Вставить("ЭтоДокумент",ЭтоДокумент);
		ВходныеДанные.Вставить("ЭтоДвижение",ЭтоДвижение);
		СтруктураВозврата = ОбъектЗаписать(ВходныеДанные);
		//Если СтруктураВозврата.Успех Тогда
		НоваяСтрока = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураВозврата);
		//КонецЕсли;
		
	КонецЦикла; 		
	
	Возврат ТЗ;  
	
КонецФункции

Процедура ЗаполнитьСтруктуруТипов()
	
	
	СоответствиеХМЛ = Новый Соответствие;	
	//	СоответствиеХМЛ.Вставить(Тип(<Тип этой 1С базы>),<Тип 1С базы получателя>);
	СоответствиеХМЛ.Вставить(Тип("Дата"),"Дата");
	СоответствиеХМЛ.Вставить(Тип("ВидДвиженияНакопления"),"ВидДвиженияНакопления");
	СоответствиеХМЛ.Вставить(Тип("ДвоичныеДанные"),"ДвоичныеДанные");
	СоответствиеХМЛ.Вставить(Тип("ХранилищеЗначения"),"ХранилищеЗначения");
	СоответствиеХМЛ.Вставить(Тип("УникальныйИдентификатор"),"УникальныйИдентификатор");
	СоответствиеХМЛ.Вставить(Тип("ВидСчета"),"ВидСчета");
	//	СоответствиеХМЛ.Вставить(Тип("ДокументСсылка.Поступление"),"ДокументСсылка.ПоступлениеТоваровУслуг");
	
	СоответствиеОбъектов = Новый Соответствие;	
	//  ДЛЯ УКАЗАННЫХ ТУТ ОБЪЕКТОВ ОБЯЗАТЕЛЬНО УКАЗАНИЕ СООТВЕТСТВИЯ ССЫЛОК В СТРУКТУРЕ СоответствиеХМЛ	
	//	СоответствиеОбъектов.Вставить(Тип(<Тип объекта этой 1С базы>),<Конструктор нового объекта базы получателя>);
	//	СоответствиеОбъектов.Вставить(Тип("ДокументОбъект.Поступление"),"Документы.ПоступлениеТоваровУслуг.СоздатьДокумент()");
	
	МассивТиповТекст = Новый Массив;
	МассивТиповТекст.Добавить("Дата");
	МассивТиповТекст.Добавить("ВидДвиженияНакопления");
	МассивТиповТекст.Добавить("ДвоичныеДанные");
	МассивТиповТекст.Добавить("ХранилищеЗначения");
	МассивТиповТекст.Добавить("УникальныйИдентификатор");
	МассивТиповТекст.Добавить("ВидСчета");
	
	
	МассивОтсутствующихТипов = Новый Массив;
	
	Для каждого Документ Из Метаданные.Документы Цикл
		СоответствиеХМЛ.Вставить(Тип("ДокументСсылка."+Документ.Имя),"ДокументСсылка."+Документ.Имя);
		СоответствиеОбъектов.Вставить(Тип("ДокументОбъект."+Документ.Имя),"Документы."+Документ.Имя+".СоздатьДокумент()");
		МассивТиповТекст.Добавить("ДокументСсылка."+Документ.Имя);
	КонецЦикла; 
	Для каждого Справочник Из Метаданные.Справочники Цикл
		СоответствиеХМЛ.Вставить(Тип("СправочникСсылка."+Справочник.Имя),"СправочникСсылка."+Справочник.Имя);
		//Ал++
		СоответствиеХМЛ.Вставить("СправочникСсылка."+Справочник.Имя,"Справочники."+Справочник.Имя);
		Запрос = Новый Запрос;
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	<Таблица>
		|ГДЕ
		|	Предопределенный";
		
		ЗапросТекст = СтрЗаменить(ЗапросТекст,"<Таблица>","Справочник." + Справочник.Имя);
		Запрос.Текст = ЗапросТекст;
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИмяПредопределенного = Справочники[Справочник.Имя].ПолучитьИмяПредопределенного(ВыборкаДетальныеЗаписи.Ссылка);
			СоответствиеХМЛ.Вставить(ВыборкаДетальныеЗаписи.Ссылка,"Справочники."+Справочник.Имя+"."+ИмяПредопределенного);
		КонецЦикла;
		//Ал--
		СоответствиеОбъектов.Вставить(Тип("СправочникОбъект."+Справочник.Имя),"Справочники."+Справочник.Имя+".СоздатьЭлемент()");
		МассивТиповТекст.Добавить("СправочникСсылка."+Справочник.Имя);
	КонецЦикла; 
	
	Для каждого ПланВидовХарактеристик Из Метаданные.ПланыВидовХарактеристик Цикл
		СоответствиеХМЛ.Вставить(Тип("ПланВидовХарактеристикСсылка."+ПланВидовХарактеристик.Имя),"ПланВидовХарактеристикСсылка."+ПланВидовХарактеристик.Имя);
		//Ал++
		СоответствиеХМЛ.Вставить("ПланВидовХарактеристикСсылка."+ПланВидовХарактеристик.Имя,"ПланыВидовХарактеристик."+ПланВидовХарактеристик.Имя);
		Запрос = Новый Запрос;
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	<Таблица>
		|ГДЕ
		|	Предопределенный";
		
		ЗапросТекст = СтрЗаменить(ЗапросТекст,"<Таблица>","ПланВидовХарактеристик." + ПланВидовХарактеристик.Имя);
		Запрос.Текст = ЗапросТекст;
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИмяПредопределенного = ПланыВидовХарактеристик[ПланВидовХарактеристик.Имя].ПолучитьИмяПредопределенного(ВыборкаДетальныеЗаписи.Ссылка);
			СоответствиеХМЛ.Вставить(ВыборкаДетальныеЗаписи.Ссылка,"ПланыВидовХарактеристик."+ПланВидовХарактеристик.Имя+"."+ИмяПредопределенного);
		КонецЦикла;
		//Ал--
		СоответствиеОбъектов.Вставить(Тип("ПланВидовХарактеристикОбъект."+ПланВидовХарактеристик.Имя),"ПланыВидовХарактеристик."+ПланВидовХарактеристик.Имя+".СоздатьЭлемент()");
		МассивТиповТекст.Добавить("ПланВидовХарактеристикСсылка."+ПланВидовХарактеристик.Имя);
	КонецЦикла; 
	Для каждого ПланВидовРасчета Из Метаданные.ПланыВидовРасчета Цикл
		СоответствиеХМЛ.Вставить(Тип("ПланВидовРасчетаСсылка."+ПланВидовРасчета.Имя),"ПланВидовРасчетаСсылка."+ПланВидовРасчета.Имя);
		СоответствиеОбъектов.Вставить(Тип("ПланВидовРасчетаОбъект."+ПланВидовРасчета.Имя),"ПланыВидовРасчета."+ПланВидовРасчета.Имя+".СоздатьВидРасчета()");
		МассивТиповТекст.Добавить("ПланВидовРасчетаСсылка."+ПланВидовРасчета.Имя);
	КонецЦикла; 
	Для каждого ПланСчетов Из Метаданные.ПланыСчетов Цикл
		СоответствиеХМЛ.Вставить(Тип("ПланСчетовСсылка."+ПланСчетов.Имя),"ПланСчетовСсылка."+ПланСчетов.Имя);
		//Ал++
		СоответствиеХМЛ.Вставить("ПланСчетовСсылка."+ПланСчетов.Имя,"ПланыСчетов."+ПланСчетов.Имя);
		Запрос = Новый Запрос;
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	<Таблица>
		|ГДЕ
		|	Предопределенный";
		
		ЗапросТекст = СтрЗаменить(ЗапросТекст,"<Таблица>","ПланСчетов." + ПланСчетов.Имя);
		Запрос.Текст = ЗапросТекст;
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИмяПредопределенного = ПланыСчетов[ПланСчетов.Имя].ПолучитьИмяПредопределенного(ВыборкаДетальныеЗаписи.Ссылка);
			СоответствиеХМЛ.Вставить(ВыборкаДетальныеЗаписи.Ссылка,"ПланыСчетов."+ПланСчетов.Имя+"."+ИмяПредопределенного);
		КонецЦикла;
		//Ал--
		СоответствиеОбъектов.Вставить(Тип("ПланСчетовОбъект."+ПланСчетов.Имя),"ПланыСчетов."+ПланСчетов.Имя+".СоздатьСчет()");
		МассивТиповТекст.Добавить("ПланСчетовСсылка."+ПланСчетов.Имя);
	КонецЦикла; 
	Для каждого Перечисление Из Метаданные.Перечисления Цикл
		СоответствиеХМЛ.Вставить(Тип("ПеречислениеСсылка."+Перечисление.Имя),"ПеречислениеСсылка."+Перечисление.Имя);
		МассивТиповТекст.Добавить("ПеречислениеСсылка."+Перечисление.Имя);
	КонецЦикла; 
	
	СтруктураТипов = Новый Структура("МассивОтсутствующихТипов,МассивТиповТекст,СоответствиеХМЛ,СоответствиеОбъектов,SAVE",МассивОтсутствующихТипов,МассивТиповТекст,СоответствиеХМЛ,СоответствиеОбъектов,Истина);
	ЭтотОбъект.ХранилищеСтруктурыТипов = Новый ХранилищеЗначения(СтруктураТипов);
	
	
КонецПроцедуры

Функция ДесерилизаторJSON(ДанныеВходные) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON; 
	ЧтениеJSON.УстановитьСтроку(ДанныеВходные); 
	ДанныеВозврат = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON); 
	ЧтениеJSON.Закрыть(); 
	Возврат ДанныеВозврат;
	
КонецФункции 

Функция СериализаторJSON(ДанныеВходные) Экспорт
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
	ЗаписьJSON = Новый ЗаписьJSON; 
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,ДанныеВходные,НазначениеТипаXML.Явное); 
	СтрокаJSON = ЗаписьJSON.Закрыть(); 
	Возврат СтрокаJSON;
	
КонецФункции 

//В функции конструкции условий расставлены по частоте их использования.
//Если кому нибудь удастся более оптимально (в смысле быстродействия) написать,
//то просьба сообщить мне на bigb.forum@gmail.com
Функция JSON(Значение,СтруктураТипов=Неопределено)
	
	Если СтруктураТипов=Неопределено Тогда
		СоответствиеХМЛ = Новый Соответствие;
		СоответствиеОбъектов  = Новый Соответствие;
		СтруктураТипов = Новый Структура("СоответствиеХМЛ,СоответствиеОбъектов",СоответствиеХМЛ,СоответствиеОбъектов);
	Иначе
		СоответствиеХМЛ = СтруктураТипов.СоответствиеХМЛ;
		СоответствиеОбъектов  = СтруктураТипов.СоответствиеОбъектов;
	КонецЕсли; 
	
	Разделитель="";
	
	ТипЗн=ТипЗнч(Значение);
	
	Если ТипЗн=Тип("Строка") Тогда
		Стр=""""+Экранировать(Значение)+""""
		
	ИначеЕсли ТипЗн=Тип("Число") ИЛИ ТипЗнч(Значение)=Тип("Булево") Тогда
		Стр=XMLСтрока(Значение)
		
		//ИначеЕсли ТипЗн=Тип("Дата") Тогда
		//	Стр=""""+?(ЗначениеЗаполнено(Значение),XMLСтрока(Значение),"")+""""
		
	ИначеЕсли ТипЗн=Тип("Структура") Тогда
		Стр="{";
		Для Каждого Параметр Из Значение Цикл
			Стр=Стр+Разделитель+Символы.ПС+""""+Параметр.Ключ+""":"+JSON(Параметр.Значение,СтруктураТипов);
			Разделитель=","
		КонецЦикла;
		Стр=Стр+Символы.ПС+"}";
		
	ИначеЕсли ТипЗн=Тип("Массив") Тогда
		Стр="[";
		Для Каждого Элемент Из Значение Цикл
			Стр=Стр+Разделитель+Символы.ПС+JSON(Элемент,СтруктураТипов);
			Разделитель=","
		КонецЦикла;
		Стр=Стр+Символы.ПС+"]";
		
	ИначеЕсли ТипЗн=Тип("ТаблицаЗначений") Тогда
		Колонки=Значение.Колонки;
		СтруктураТЗ = Новый Структура;
		СтруктураТЗ.Вставить("TYPE","ТаблицаЗначений");
		СтруктураТЗ.Вставить("COLUMNS",Новый Структура);
		СтруктураТЗ.Вставить("ROWS",Новый Массив);
		Для Каждого Колонка Из Колонки Цикл
			СтруктураТЗ.COLUMNS.Вставить(Колонка.Имя,);
		КонецЦикла;
		Для Каждого СтрокаТЗ Из Значение Цикл
			Структура=Новый Структура;
			Для Каждого Колонка Из Колонки Цикл
				//Если ЗначениеЗаполнено(СтрокаТЗ[Колонка.Имя]) Тогда  Ал//++ Для корректной выгрузки движений
				Структура.Вставить(Колонка.Имя,СтрокаТЗ[Колонка.Имя])
				//КонецЕсли;  Ал//--
			КонецЦикла;
			СтруктураТЗ.ROWS.Добавить(Структура);
		КонецЦикла;
		Стр=JSON(СтруктураТЗ,СтруктураТипов)
		
	ИначеЕсли Значение=Неопределено Тогда
		Стр="null"
		
	ИначеЕсли СоответствиеХМЛ.Получить(ТипЗн) <> Неопределено Тогда
		
		ЗначениеСтруктурой = Новый Структура("TYPE,UID,",СоответствиеХМЛ.Получить(ТипЗн),XMLСтрока(Значение));
		//Ал++
		МД = Метаданные.НайтиПоТипу(ТипЗн);
		Если НЕ МД = Неопределено  Тогда
			Если Метаданные.ПланыСчетов.Содержит(МД)
				ИЛИ	Метаданные.ПланыВидовХарактеристик.Содержит(МД)
				ИЛИ	Метаданные.Справочники.Содержит(МД) Тогда
				//Если ТипЗн = Тип("ПланСчетовСсылка.Хозрасчетный") ИЛИ ТипЗн = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные") Тогда
				Если Значение.Предопределенный Тогда
					//ИмяПредопределенныхДанных 8.2 не потдерживается
					//Попытка
					//	ИмяПредопределенныхДанных = Значение.ИмяПредопределенныхДанных;
					//Исключение
					ИмяПредопределенныхДанных = СоответствиеХМЛ.Получить(Значение);
					//КонецПопытки;
					
					Если НЕ ИмяПредопределенныхДанных = Неопределено Тогда
						ЗначениеСтруктурой.Вставить("NAME",ИмяПредопределенныхДанных);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		//Ал--
		
		Стр=JSON(ЗначениеСтруктурой,СтруктураТипов)
		
	ИначеЕсли СоответствиеОбъектов.Получить(ТипЗн) <> Неопределено Тогда
		
		ЗначениеСтруктурой = Новый Структура("OBJECT,NEW",Истина,СоответствиеОбъектов.Получить(ТипЗн));
		ЗначениеСтруктурой.Вставить("SAVE",СтруктураТипов.Свойство("SAVE") И СтруктураТипов.SAVE = Истина);
		
		//Значение = Документы.Поступление.НайтиПоНомеру("000000001").ПолучитьОбъект();
		МетаданныеЗначения = Значение.Метаданные();
		
		Для каждого СтандартныйРеквизит Из МетаданныеЗначения.СтандартныеРеквизиты Цикл
			ЗначениеСтруктурой.Вставить(СтандартныйРеквизит.Имя,Значение[СтандартныйРеквизит.Имя]);
		КонецЦикла; 
		
		ЭтоГруппа = ЗначениеСтруктурой.Свойство("ЭтоГруппа") И ЗначениеСтруктурой.ЭтоГруппа = Истина;
		
		Если ЭтоГруппа Тогда
			ЗначениеСтруктурой.NEW = СтрЗаменить(ЗначениеСтруктурой.NEW,"СоздатьЭлемент()","СоздатьГруппу()");
		КонецЕсли; 
		Для каждого Реквизит Из МетаданныеЗначения.Реквизиты Цикл
			Если ЭтоГруппа И Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(Значение[Реквизит.Имя]) Тогда
				ЗначениеСтруктурой.Вставить(Реквизит.Имя,Значение[Реквизит.Имя]);
			КонецЕсли; 
		КонецЦикла; 
		Для каждого ТабличнаяЧасть Из МетаданныеЗначения.ТабличныеЧасти Цикл
			Если ЭтоГруппа И ТабличнаяЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
				Продолжить;
			КонецЕсли; 
			
			Если Значение[ТабличнаяЧасть.Имя].Количество()>0 Тогда
				ЗначениеСтруктурой.Вставить(ТабличнаяЧасть.Имя,Значение[ТабличнаяЧасть.Имя].Выгрузить());
			КонецЕсли; 
		КонецЦикла;
		//Ал++
		Если ЗагружатьДвижения И Метаданные.Документы.Содержит(МетаданныеЗначения) Тогда
			Для каждого Движение Из МетаданныеЗначения.Движения Цикл
				Значение.Движения[Движение.Имя].Прочитать();
				Если Значение.Движения[Движение.Имя].Количество() > 0 Тогда				
					
					Если Найти(Движение.ПолноеИмя(),"РегистрБухгалтерии") > 0 Тогда
						ОбъектИБ = "РегистрыБухгалтерии." + Движение.Имя + ".СоздатьНаборЗаписей()";
					ИначеЕсли Найти(Движение.ПолноеИмя(),"РегистрНакопления") > 0 Тогда
						ОбъектИБ = "РегистрыНакопления." + Движение.Имя + ".СоздатьНаборЗаписей()";
					ИначеЕсли Найти(Движение.ПолноеИмя(),"РегистрСведений") > 0 Тогда
						ОбъектИБ = "РегистрыСведений." + Движение.Имя + ".СоздатьНаборЗаписей()";
					КонецЕсли;
					
					СтруктураДВ = Новый Структура();
					СтруктураДВ.Вставить("NEW",ОбъектИБ);
					СтруктураДВ.Вставить("TYPE","Движение");
					СтруктураДВ.Вставить("Регистратор",ЗначениеСтруктурой.Ссылка);
					//СтруктураДВ.Вставить("ИмяРегистра",Движение.Имя);
					СтруктураДВ.Вставить("Движение",Значение.Движения[Движение.Имя].Выгрузить());
					ЗначениеСтруктурой.Вставить(Движение.Имя,СтруктураДВ);
					
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		//Ал--
		Стр=JSON(ЗначениеСтруктурой,СтруктураТипов)
	Иначе
		Стр=""""+Экранировать(Значение)+""""
	КонецЕсли;
	
	Возврат Стр
КонецФункции

Функция UnJSON(СтрJSON,СтруктураТипов,Значение,Позиция=1,Ключ="")
	Перем Кавычка;
	
	СоответствиеХМЛ           = СтруктураТипов.СоответствиеХМЛ;
	МассивТиповТекст          = СтруктураТипов.МассивТиповТекст;
	МассивОтсутствующихТипов  = СтруктураТипов.МассивОтсутствующихТипов;
	
	ЗначениеВСтроке="";
	Кавычек=0;
	Комментарий=Ложь;
	Строка=Ложь;
	
	Пока Позиция<=СтрДлина(СтрJSON) Цикл
		ХХ=Сред(СтрJSON,Позиция,2);
		Х=Лев(ХХ,1);
		Позиция=Позиция+1;
		
		Если Х>" " ИЛИ Строка Тогда //Отсекаем всякий хлам
			
			Если Комментарий Тогда
				//Это комментарий. Крутимся в цикле пока не встретится конец комментария
				Если ХХ="*/" Тогда
					//Комментарий закончился
					Комментарий=Ложь;
					Позиция=Позиция+1;
				КонецЕсли;
				
			ИначеЕсли Х="\" Тогда
				Позиция=Позиция+1;
				ХХ=ВРег(ХХ);
				Если ХХ="\""" Тогда ЗначениеВСтроке=ЗначениеВСтроке+""""
				ИначеЕсли ХХ="\\" Тогда ЗначениеВСтроке=ЗначениеВСтроке+"\"
				ИначеЕсли ХХ="\/" Тогда ЗначениеВСтроке=ЗначениеВСтроке+"/"
				ИначеЕсли ХХ="\:" Тогда ЗначениеВСтроке=ЗначениеВСтроке+":"
				ИначеЕсли ХХ="\," Тогда ЗначениеВСтроке=ЗначениеВСтроке+","
				ИначеЕсли ХХ="\B" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символ(8)
				ИначеЕсли ХХ="\F" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ПФ //перевод формы (страницы)
				ИначеЕсли ХХ="\N" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ПС //перевод строки
				ИначеЕсли ХХ="\R" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ВК //возврат каретки
				ИначеЕсли ХХ="\T" Тогда ЗначениеВСтроке=ЗначениеВСтроке+Символы.ВТаб //символ вертикальной табуляции
				ИначеЕсли ХХ="\U" Тогда
					ЗначениеВСтроке=ЗначениеВСтроке+Символ(Hex2Число(Сред(СтрJSON,Позиция,4))); //шестнадцатиричное число
					Позиция=Позиция+4
				КонецЕсли;
				
			ИначеЕсли Строка Тогда
				//Если строка не закончилась - то пропускаем управляющие символы
				Если Х=Кавычка Тогда
					//Закончилась строка
					Строка=Ложь;
					Кавычек=Кавычек+1;
				Иначе
					ЗначениеВСтроке=ЗначениеВСтроке+Х;
				КонецЕсли;
				
			ИначеЕсли ХХ="/*" Тогда
				//Начался комментарий
				Комментарий=Истина;
				Позиция=Позиция+1;
				
			ИначеЕсли Найти("""'{}[]:,",Х)>0 Тогда
				Если Х="""" ИЛИ Х="'" Тогда
					//Началась строка
					//Строка - коллекция нуля или больше символов Unicode, заключенная в
					//двойные кавычки, используя "\" в качестве символа экранирования.
					//Символ представляется как односимвольная строка.
					//Похожий синтаксис используется в C и Java.
					Строка=Истина;
					Кавычка=Х;
					Кавычек=Кавычек+1;
					
				ИначеЕсли Х="{" Тогда
					//Начался объект
					//Объект - неупорядоченный набор пар ключ/значение.
					//Объект начинается с "{" и заканчивается "}".
					//Каждое имя сопровождается ":", пары ключ/значение разделяются ",".
					ОбъектСтруктура=Новый Структура;
					//Объект=Новый Структура;
					Пока Истина Цикл
						//Получим ключ и значение
						Ключ="";
						Режим=UnJSON(СтрJSON,СтруктураТипов,Значение,Позиция,Ключ);
						//0 - есть значение и не конец объекта (запятая)
						//1 - есть значение и конец объекта
						//2 - нет значения и не конец объекта (запятая)
						//3 - нет значения и конец объекта
						Если Режим=0 Тогда
							ОбъектСтруктура.Вставить(Ключ,Значение);
						ИначеЕсли Режим=1 Тогда
							ОбъектСтруктура.Вставить(Ключ,Значение);
							Прервать
						ИначеЕсли Режим=3 Тогда
							Прервать
						КонецЕсли;
					КонецЦикла; 
					
					Если ОбъектСтруктура.Свойство("UID") Тогда
						
						Если МассивТиповТекст.Найти(ОбъектСтруктура.TYPE)<>Неопределено Тогда
							//Ал++ Дописал синхронизайию по имени предопределенных данным
							
							Если ОбъектСтруктура.Свойство("NAME") Тогда
								Попытка
									Значение = Вычислить(ОбъектСтруктура.NAME);
								Исключение
									Значение = ОбъектСтруктура.UID;
								КонецПопытки;
							Иначе	
								Попытка
									Значение = XMLЗначение(Тип(ОбъектСтруктура.TYPE),ОбъектСтруктура.UID);
								Исключение
									Значение = ОбъектСтруктура.UID;
								КонецПопытки;
								
							КонецЕсли;
							//Ал--
							
						Иначе
							МассивОтсутствующихТипов.Добавить(ОбъектСтруктура.TYPE);
							Значение = ОбъектСтруктура.UID;
						КонецЕсли;
						
					ИначеЕсли ОбъектСтруктура.Свойство("OBJECT") Тогда
						//Это объект
						Если ЗначениеЗаполнено(ОбъектСтруктура.Ссылка) И СоответствиеХМЛ.Получить(ТипЗнч(ОбъектСтруктура.Ссылка))<>Неопределено Тогда
							//Получаем объект
							ОбъектИБ = ОбъектСтруктура.Ссылка.ПолучитьОбъект();
							Если ОбъектИБ = Неопределено Тогда								
								//Если объекта нет, то создать
								ОбъектИБ = Вычислить(ОбъектСтруктура.NEW);
								ОбъектИБ.УстановитьСсылкуНового(ОбъектСтруктура.Ссылка);
							КонецЕсли; 
							//Проверим соответствие испльзования элементов для групп
							МетаданныеЗначения = ОбъектИБ.Метаданные();
							ЭтоГруппа = ОбъектСтруктура.Свойство("ЭтоГруппа") И ОбъектСтруктура.ЭтоГруппа = Истина;
							Для каждого Реквизит Из МетаданныеЗначения.Реквизиты Цикл
								Если ЭтоГруппа И Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
									ОбъектСтруктура.Удалить(Реквизит.Имя)
								КонецЕсли; 
							КонецЦикла; 
							//Проверить совпадение подчиненности справочников
							Если ОбъектСтруктура.Свойство("Владелец") И МетаданныеЗначения.Владельцы.Количество()=0 Тогда
								ОбъектСтруктура.Удалить("Владелец");
							КонецЕсли; 
							
							//Заполнить реквизиты
							//Ал++
							Если ОбъектСтруктура.Свойство("Родитель") И Метаданные.Справочники.Содержит(МетаданныеЗначения) И НЕ МетаданныеЗначения.Иерархический Тогда
								ОбъектСтруктура.Удалить("Родитель");
							КонецЕсли;
							ЗаполнитьЗначенияСвойств(ОбъектИБ,ОбъектСтруктура);
							//Ал--
							//Определить ТЧ и попытаться заполнить
							Для каждого ТабличнаяЧасть Из МетаданныеЗначения.ТабличныеЧасти Цикл
								//Если ТЧ для групп не используется и наш объект группа, то пропустить ТЧ
								Если ЭтоГруппа И ТабличнаяЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
									Продолжить;
								КонецЕсли; 
								//Если есть данные о ТЧ, то заполнить ТЧ, иначе очистить
								Если ОбъектСтруктура.Свойство(ТабличнаяЧасть.Имя) И ТипЗнч(ОбъектСтруктура[ТабличнаяЧасть.Имя]) = Тип("ТаблицаЗначений") Тогда
									ОбъектИБ[ТабличнаяЧасть.Имя].Загрузить(ОбъектСтруктура[ТабличнаяЧасть.Имя]);
								Иначе 
									ОбъектИБ[ТабличнаяЧасть.Имя].Очистить();
								КонецЕсли; 
							КонецЦикла;
							
							Если ОбъектСтруктура.Свойство("SAVE") И ОбъектСтруктура.SAVE = Истина Тогда
								Значение = ОбъектИБ;
							КонецЕсли; 
							
						Иначе
							Значение = ОбъектСтруктура.Ссылка;
						КонецЕсли;	
						
					ИначеЕсли ОбъектСтруктура.Свойство("TYPE") Тогда
						Если ОбъектСтруктура.TYPE = "ТаблицаЗначений" Тогда
							//Это таблица
							СтруктураТЗ = Новый Структура;
							ТаблицаРезультата = Новый ТаблицаЗначений;
							Для каждого Колонка Из ОбъектСтруктура.COLUMNS Цикл
								ТаблицаРезультата.Колонки.Добавить(Колонка.Ключ);
							КонецЦикла; 
							Для каждого СтрокаТаблицы Из ОбъектСтруктура.ROWS Цикл
								НоваяСтрока = ТаблицаРезультата.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
							КонецЦикла; 
							Значение= ТаблицаРезультата;
						ИначеЕсли ОбъектСтруктура.TYPE = "Движение" И ЗагружатьДвижения Тогда  //Это движение
							
							Регистратор  = Неопределено;
							Если ОбъектСтруктура.Свойство("Регистратор",Регистратор) Тогда 	
								
								Если Регистратор.ПолучитьОбъект() = Неопределено Тогда
									ТекстСообщения = "Движение не записано, нет регистратора, повторите загрузку """+ОбъектСтруктура.Регистратор+"""";
									Сообщение = Новый СообщениеПользователю;
									Сообщение.Текст = ТекстСообщения;
									Сообщение.КлючДанных = ОбъектСтруктура.Регистратор;
									Сообщение.Сообщить();
									Продолжить;
								КонецЕсли;
								
								ОбъектИБ = Вычислить(ОбъектСтруктура.NEW);
								ОбъектИБ.Отбор.Регистратор.Значение = ОбъектСтруктура.Регистратор;
								НоваяСтрока = ОбъектИБ.Вставить(0);
								М = Новый Массив;
								М.Добавить(НоваяСтрока);
								ШаблонДВ = ОбъектИБ.Выгрузить();
								
								Если ЗагружатьВРежимеЗагрузки Тогда
									ОбъектИБ.ОбменДанными.Загрузка = Истина;
								КонецЕсли;
								
								Для каждого строкаДВ Из ОбъектСтруктура.Движение Цикл
									НоваяСтрока = ШаблонДВ.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока,строкаДВ);
									
									Если Найти(ОбъектСтруктура.NEW,"РегистрыБухгалтерии.") > 0 Тогда
										ПочиститьСубконто(НоваяСтрока,строкаДВ);
									КонецЕсли;
									
								КонецЦикла; 
								
								ШаблонДВ.Удалить(0);
								
								Попытка                                                                                            
									ОбъектИБ.Загрузить(ШаблонДВ);
									ОбъектИБ.Записать();
								Исключение
									ТекстСообщения = "Не удалось записать объект """+ОбъектИБ+"""" + Символы.ПС + ОписаниеОшибки();
									Сообщение = Новый СообщениеПользователю;
									Сообщение.Текст = ТекстСообщения;
									Сообщение.КлючДанных = ОбъектСтруктура.Ссылка;
									Сообщение.Сообщить();
								КонецПопытки;
								
								Значение = ОбъектИБ;
							КонецЕсли;
						Иначе
							//Сюда мы попадать не должны
							Сообщить("Тип не определен:"+ОбъектСтруктура.TYPE);
						КонецЕсли; 
					Иначе
						//Иначе это обычная структура
						Значение = ОбъектСтруктура;
					КонецЕсли; 
					Возврат 0
				ИначеЕсли Х="[" Тогда
					//Начался массив
					//Массив - упорядоченная коллекция значений.
					//Массив начинается с "[" и заканчивается "]".
					//Значения разделены ",".
					Массив=Новый Массив;
					Пока Истина Цикл
						Режим=UnJSON(СтрJSON,СтруктураТипов,Значение,Позиция);
						//0 - есть значение и не конец массива (запятая)
						//1 - есть значение и конец массива
						//2 - нет значения и не конец массива (запятая)
						//3 - нет значения и конец массива
						Если Режим=0 Тогда
							Массив.Добавить(Значение);
						ИначеЕсли Режим=1 Тогда
							Массив.Добавить(Значение);
							Прервать
						ИначеЕсли Режим=3 Тогда
							Прервать
						КонецЕсли;
					КонецЦикла;
					Если Массив.Количество() > 0 И ТипЗнч(Массив[0])=Тип("Структура") Тогда
						//Если мы получили массив структур, то это таблица
						ТаблицаРезультата = Новый ТаблицаЗначений;
						Для каждого Колонка Из Массив[0] Цикл
							ТаблицаРезультата.Колонки.Добавить(Колонка.Ключ);
						КонецЦикла; 
						Для каждого СтрокаТаблицы Из Массив Цикл
							НоваяСтрока = ТаблицаРезультата.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
						КонецЦикла; 
						Значение= ТаблицаРезультата;
					Иначе
						Значение=Массив;
					КонецЕсли; 
					Возврат 0
				ИначеЕсли Х="]" ИЛИ Х="}" Тогда
					//Закончился массив/объект
					Если ЗначениеВСтроке="" И Кавычек=0 Тогда
						Возврат 3 //нет значения и конец массива/объекта
					Иначе
						Значение=ПолучитьЗначениеИзСтроки(ЗначениеВСтроке,Кавычек);
						Возврат 1 //есть значение и конец массива/объекта
					КонецЕсли;
				ИначеЕсли Х=":" Тогда
					Ключ=ЗначениеВСтроке;
					Возврат UnJSON(СтрJSON,СтруктураТипов,Значение,Позиция);
					
				Иначе
					// запятая
					Прервать
				КонецЕсли;
				
			Иначе
				ЗначениеВСтроке=ЗначениеВСтроке+Х;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Кавычек>0 Тогда
		Значение=ЗначениеВКавычках(ЗначениеВСтроке);
	Иначе
		Если ЗначениеВСтроке="" Тогда
			Возврат 2
		Иначе
			Значение=ЗначениеБезКавычек(ЗначениеВСтроке)
		КонецЕсли;
	КонецЕсли;
	Возврат 0
КонецФункции

Функция Hex2Число(Hex)
	Стр=ВРег(СокрЛП(Hex));
	Dec=0;
	Для Х=1 По СтрДлина(Стр) Цикл
		Dec=Dec+Найти("123456789ABCDEF",Сред(Стр,Х,1))*Pow(16,СтрДлина(Стр)-Х)
	КонецЦикла;
	Возврат Dec
КонецФункции

Функция ПолучитьЗначениеИзСтроки(ЗначениеВСтроке,Кавычек)
	Если Кавычек>0 Тогда
		Возврат ЗначениеВКавычках(ЗначениеВСтроке)
	ИначеЕсли ЗначениеВСтроке="" Тогда
		Возврат Неопределено
	КонецЕсли;
	Возврат ЗначениеБезКавычек(ЗначениеВСтроке)
КонецФункции

Функция ЗначениеВКавычках(ЗначениеВСтроке)
	//Это или строка или дата.
	//Дата пока не обрабатывается (потом надо дописать)
	//Пока всегда возвращаем просто строку
	Возврат ЗначениеВСтроке
КонецФункции

Функция ЗначениеБезКавычек(ЗначениеВСтроке)
	//Это число, булево или null.
	//Хотя здесь могут быть и строки. Например: {Code:123}
	Стр=ВРег(ЗначениеВСтроке);
	Если Стр="TRUE" Тогда Возврат Истина
	ИначеЕсли Стр="FALSE" Тогда Возврат Ложь
	ИначеЕсли Стр="NULL" Тогда Возврат Неопределено
	КонецЕсли;
	
	//Пробежимся по предполагаемому "числу"
	Экспонента=Ложь;
	ХХ=" ";
	Для Индекс=1 По СтрДлина(Стр) Цикл
		Х=Сред(Стр,Индекс,1);
		Если Найти("0123456789.+-",Х) Тогда
			ХХ=ХХ+Х
		ИначеЕсли Х="E" Тогда
			Экспонента=Истина;
			УУ=XMLЗначение(Тип("Число"),ХХ);
			ХХ=" ";
		Иначе
			Возврат ЗначениеВСтроке //Это точно не число, а строка
		КонецЕсли;
	КонецЦикла;
	
	ХХ=XMLЗначение(Тип("Число"),ХХ);
	Если Экспонента Тогда
		ХХ=УУ*Pow(10,ХХ)
	КонецЕсли;
	
	Возврат ХХ
КонецФункции

//Экранирует недопустимые символы
Функция Экранировать(Стр)
	Х=СтрЗаменить(Стр,"\","\\");
	Х=СтрЗаменить(Х,"""","\""");
	//Х=СтрЗаменить(Х,"'","\'"); //??? Не уверен в этой строке. Кто нибудь может подтвердить или опровергнуть нужность этой строки.
	Х=СтрЗаменить(Х,":","\:");
	Х=СтрЗаменить(Х,",","\,");
	Х=СтрЗаменить(Х,"/","\/"); //Тут тоже не уверен, но пока оставлю.
	Х=СтрЗаменить(Х,Символ(8),"\b");
	Х=СтрЗаменить(Х,Символы.ПФ,"\f");
	Х=СтрЗаменить(Х,Символы.ПС,"\n");
	Х=СтрЗаменить(Х,Символы.ВК,"\r");
	Х=СтрЗаменить(Х,Символы.ВТаб,"\t");
	Возврат Х
КонецФункции

Процедура ПочиститьСубконто(НоваяСтрока,СтрокаДВ)
	
	ЕстьСчетДт = СтрокаДВ.СчетДт <> Неопределено И НЕ СтрокаДВ.СчетДт.Пустая() И СтрокаДВ.СчетДт.ПолучитьОбъект() <> Неопределено И НЕ СтрокаДВ.СчетДт.ЗапретитьИспользоватьВПроводках; 
	ЕстьСчетКт = СтрокаДВ.СчетКт <> Неопределено И НЕ СтрокаДВ.СчетКт.Пустая() И СтрокаДВ.СчетКт.ПолучитьОбъект() <> Неопределено И НЕ СтрокаДВ.СчетКт.ЗапретитьИспользоватьВПроводках;
	
	Если ЕстьСчетДт Тогда
		
		Если НЕ СтрокаДВ.СчетДт.УчетПоПодразделениям Тогда
			НоваяСтрока.ПодразделениеДт = Неопределено;
		КонецЕсли;
		
		Если НЕ СтрокаДВ.СчетДт.Количественный Тогда
			НоваяСтрока.КоличествоДт = 0;
		КонецЕсли;
		
		Если НЕ СтрокаДВ.СчетДт.Валютный Тогда
			
		КонецЕсли;
		
		Если НЕ СтрокаДВ.СчетДт.НалоговыйУчет Тогда
			НоваяСтрока.СуммаНуДт = 0;
			НоваяСтрока.СуммаПрДт = 0;
			НоваяСтрока.СуммаВрДт = 0;
		КонецЕсли;
		
		Для сч = 1 По 3 Цикл
			Флажок = Ложь;
			Для каждого ВидыСубконто из СтрокаДВ.СчетДт.ВидыСубконто Цикл
				Если ВидыСубконто.ВидСубконто = строкаДВ["ВидСубконтоДт" + сч] Тогда
					Флажок = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ Флажок Тогда
				НоваяСтрока["ВидСубконтоДт" + сч] = Неопределено;
				НоваяСтрока["СубконтоДт" + сч] = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	Иначе	
		СтрокаДВ.СчетДт = Неопределено;
		Для сч = 1 По 3 Цикл
			НоваяСтрока["ВидСубконтоДт" + сч] = Неопределено;
			НоваяСтрока["СубконтоДт" + сч] = Неопределено;
			НоваяСтрока.Сумма = 0;
			НоваяСтрока.КоличествоДт = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьСчетКт Тогда
		
		Если НЕ СтрокаДВ.СчетКт.УчетПоПодразделениям Тогда
			НоваяСтрока.ПодразделениеКт = Неопределено;
		КонецЕсли;
		
		Если НЕ СтрокаДВ.СчетКт.Количественный Тогда
			НоваяСтрока.КоличествоКт = 0;
		КонецЕсли;
		
		Если НЕ СтрокаДВ.СчетКт.Валютный Тогда
			
		КонецЕсли;
		
		Если НЕ СтрокаДВ.СчетКт.НалоговыйУчет Тогда
			НоваяСтрока.СуммаНуКт = 0;
			НоваяСтрока.СуммаПрКт = 0;
			НоваяСтрока.СуммаВрКт = 0;
		КонецЕсли;
		
		Для сч = 1 По 3 Цикл
			Флажок = Ложь;
			Для каждого ВидыСубконто из СтрокаДВ.СчетКт.ВидыСубконто Цикл
				Если ВидыСубконто.ВидСубконто = строкаДВ["ВидСубконтоКт" + сч] Тогда
					Флажок = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ Флажок Тогда
				НоваяСтрока["ВидСубконтоКт" + сч] = Неопределено;
				НоваяСтрока["СубконтоКт" + сч] = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		СтрокаДВ.СчетКт = Неопределено;
		Для сч = 1 По 3 Цикл
			НоваяСтрока["ВидСубконтоКт" + сч] = Неопределено;
			НоваяСтрока["СубконтоКт" + сч] = Неопределено;
			НоваяСтрока.Сумма = 0;
			НоваяСтрока.КоличествоКт = 0;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
//--Работа через JSON

#КонецОбласти

#Область ДопФункции_Алгоритмов

Функция ЧислоИзСтроки(стр) Экспорт
	
	стр = СокрЛП(стр);	
	стр = СтрЗаменить(стр," ","");
	стр = СтрЗаменить(стр," ","");
	стр = СтрЗаменить(стр,Символы.НПП,"");
	стр = СтрЗаменить(стр,",",".");
	
	Числа = "0123456789.,";
	йй ="";
	Для сч = 1 По СтрДлина(стр) Цикл
		й =  Сред(стр,сч,1);
		Если Найти(Числа,й) > 0 Тогда
			йй = йй + й;
		Иначе
			йй ="";
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		Возврат Число(йй);
	Исключение
		Возврат 0;
	КонецПопытки;
	
КонецФункции

Функция ДатаИзСтроки(ДатаСтрокой) Экспорт
	
	Час = 0;
	Минута = 0;
	Секунда = 0;
	
	СтрДата = Лев(ДатаСтрокой, 10);
	День = ЧислоИзСтроки(Лев(СтрДата, 2));
	Месяц = ЧислоИзСтроки(Сред(СтрДата, 4, 2));
	Год = ЧислоИзСтроки(Прав(СтрДата, 4));
	
	Если СтрДлина(ДатаСтрокой) = 18 ИЛИ СтрДлина(ДатаСтрокой) = 19 Тогда
		Попытка
			СтрВремя = Прав(ДатаСтрокой, 8);
			СтрВремя = СтрЗаменить(СтрВремя,":",Символы.ПС);
			
			Час = Число(СтрПолучитьСтроку(СтрВремя, 1));
			Минута = Число(СтрПолучитьСтроку(СтрВремя, 2));
			Секунда = Число(СтрПолучитьСтроку(СтрВремя, 3));
			
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Попытка
		Возврат Дата(Год, Месяц, День, Час, Минута, Секунда);
	Исключение
	КонецПопытки;
	
	Возврат ДатаСтрокой;
	
КонецФункции

Функция НайтиПоКодуНаименованию(Стр,ТекТип) Экспорт
	
	Мета = Метаданные.НайтиПоТипу(ТекТип.Типы().Получить(0));
	Если Мета = Неопределено Тогда
		Возврат СокрЛП(Стр);
	КонецЕсли;
	
	ИмяОбъекта = Метаданные.НайтиПоТипу(ТекТип.Типы().Получить(0)).Имя;
	
	ЭтоПредставление = Ложь;
	//ЭтоПредставление = Вычислить("СтрНайти(Стр,""("") > 0 И СтрНайти(Стр,"") "") > 0");
	
	ЕстьНаименованиеПолное = Ложь;
	Попытка
		рек = Метаданные.Справочники[ИмяОбъекта].Реквизиты["НаименованиеПолное"];
		ЕстьНаименованиеПолное = Истина;
	Исключение	 
	КонецПопытки;
	
	ЕстьПолноеНаименование = Ложь;
	Попытка
		рек = Метаданные.Справочники[ИмяОбъекта].Реквизиты["ПолноеНаименование"];
		ЕстьПолноеНаименование = Истина;
	Исключение	 
	КонецПопытки;
	
	ЕстьИНН = Ложь;
	Если ИмяОбъекта = "Контрагенты" ИЛИ ИмяОбъекта = "ФизическиеЛица" Тогда
		Попытка
			рек = Метаданные.Справочники[ИмяОбъекта].Реквизиты["ИНН"];
			ЕстьИНН = Истина;
		Исключение	 
		КонецПопытки;
	КонецЕсли;
	
	ЕстьКод = Ложь;
	Попытка
		рек = Метаданные.Справочники[ИмяОбъекта].ДлинаКода > 0;
		ЕстьКод = Истина;
	Исключение	 
	КонецПопытки;
	
	ЕстьНаименование = Ложь;
	Попытка
		рек = Метаданные.Справочники[ИмяОбъекта].ДлинаНаименования > 0;
		ЕстьНаименование = Истина;
	Исключение	 
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Если ИмяОбъекта = "Контрагенты" И ЭтоПредставление Тогда
		
		//Представление = "(" + Данные.ИНН + ") " + Данные.Наименование;  //Контрагенты
		
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	""("" + Контрагенты.ИНН + "") "" + Контрагенты.Наименование = &Наименование";
		
	ИначеЕсли ИмяОбъекта = "Контрагенты" И ЭтоПредставление Тогда
		
		//Представление = "(" + Данные.КПП + ") " + Данные.Наименование;  //ПодразделенияОрганизаций
		
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	""("" + ПодразделенияОрганизаций.КПП + "") "" + ПодразделенияОрганизаций.Наименование = &Наименование";
		
	ИначеЕсли ЕстьНаименование И НЕ ЕстьКод Тогда
		
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование = &Наименование";
		
	ИначеЕсли НЕ ЕстьНаименование И ЕстьКод Тогда
		
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		
		|	Номенклатура.Код = &Наименование";
		
	ИначеЕсли ЕстьНаименование И ЕстьКод Тогда
		
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование В(&Наименование)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Код = &Наименование";
		
	КонецЕсли;
	
	Если ЕстьНаименованиеПолное И НЕ ЭтоПредставление Тогда
		
		ЗапросТекст = ЗапросТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.НаименованиеПолное = &Наименование";
		
	КонецЕсли;
	
	Если ЕстьПолноеНаименование И НЕ ЭтоПредставление Тогда
		
		ЗапросТекст = ЗапросТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ПолноеНаименование = &Наименование";
		
	КонецЕсли;
	
	Если ЕстьИНН И НЕ ЭтоПредставление Тогда
		
		ЗапросТекст = ЗапросТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ИНН = &Наименование";
		
	КонецЕсли;
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст,"Номенклатура",ИмяОбъекта);
	Запрос.Текст = ЗапросТекст;
	Запрос.УстановитьПараметр("Наименование", Стр);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Свернуть("Ссылка");
	
	Попытка
		Возврат РезультатЗапроса[0].Ссылка;
	Исключение
		Возврат стр;
	КонецПопытки;
	
КонецФункции

Процедура РаспределитьСуммуПропорциональноБазе(мТаблица, ИмяКолонкиБазы, ИмяКолонкиДляРаспределения, Сумма) Экспорт
	
	СуммаБазы = мТаблица.Итог(ИмяКолонкиБазы);
	
	Если СуммаБазы = Сумма Тогда //Все ОК, ничего не меняем		
		Для каждого СтрокаТаблицы ИЗ мТаблица Цикл 
			СтрокаТаблицы[ИмяКолонкиДляРаспределения] = СтрокаТаблицы[ИмяКолонкиБазы];
		КонецЦикла;
		//Возврат;
	ИначеЕсли СуммаБазы = 0 Тогда //Делим поровну
		мТаблица.ЗаполнитьЗначения(1,ИмяКолонкиБазы);
		СуммаБазы = мТаблица.Количество();
	КонецЕсли; 
	//Делим, считеем коэффициент на каждой итерации
	Для каждого СтрокаТаблицы ИЗ мТаблица Цикл
		
		Если СуммаБазы = 0 Тогда
			Прервать;
		КонецЕсли;
		
		К = Сумма / СуммаБазы;
		
		СуммаКРаспределению = Окр(СтрокаТаблицы[ИмяКолонкиБазы] * К, 2);
		
		СтрокаТаблицы[ИмяКолонкиДляРаспределения] =  СтрокаТаблицы[ИмяКолонкиДляРаспределения] + СуммаКРаспределению;
		
		Сумма = Сумма - СуммаКРаспределению;
		
		СуммаБазы = СуммаБазы - СтрокаТаблицы[ИмяКолонкиБазы];
		
	КонецЦикла
	
КонецПроцедуры

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  Значение         - Строка - проверяемая строка.
//  Устаревший       - Булево - устаревший параметр, не используется.
//  ПробелыЗапрещены - Булево - если Ложь, то в строке допустимо наличие пробелов.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
// Пример:
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123"); // Истина
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123abc"); // Ложь
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("01 2 3",, Ложь); // Истина
//
Функция _ТолькоЦифрыВСтроке(Знач Значение, Знач Устаревший = Истина, Знач ПробелыЗапрещены = Истина) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПробелыЗапрещены Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;
	
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
	СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
	Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции

// Параметры:
//		ИНН - строка - проверяемый индивидуальный номер налогоплательщика,
//		ВладелецИНН - ПеречислениеСсылка.ЮридическоеФизическоеЛицо - тип владельца ИНН: физлицо или юрлицо
Функция ИННСоответствуетТребованиям(Знач ИНН, ВладелецИНН) Экспорт
	
	ИНН = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИНН);
	
	Если НЕ _ТолькоЦифрыВСтроке(ИНН) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДлинаИНН = 10  и ВладелецИНН = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		КонтрольнаяСумма = 0;
		
		Для Н = 1 По 9 Цикл
			
			Если 	  Н = 1 Тогда
				Множитель = 2;
			ИначеЕсли Н = 2 Тогда
				Множитель = 4;
			ИначеЕсли Н = 3 Тогда
				Множитель = 10;
			ИначеЕсли Н = 4 Тогда
				Множитель = 3;
			ИначеЕсли Н = 5 Тогда
				Множитель = 5;
			ИначеЕсли Н = 6 Тогда
				Множитель = 9;
			ИначеЕсли Н = 7 Тогда
				Множитель = 4;
			ИначеЕсли Н = 8 Тогда
				Множитель = 6;
			ИначеЕсли Н = 9 Тогда
				Множитель = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;
			
		КонецЦикла; 
		
		КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;
		
		Если КонтрольныйРазряд <> Число(Сред(ИНН,10,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	ИначеЕсли ДлинаИНН =12 и ВладелецИНН = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		КонтрольнаяСумма11 = 0;
		КонтрольнаяСумма12 = 0;
		
		Для Н=1 По 11 Цикл
			
			// Расчет множителя для 11-го и 12-го разрядов
			Если Н = 1 Тогда
				Множитель11 = 7;
				Множитель12 = 3;
			ИначеЕсли Н = 2 Тогда
				Множитель11 = 2;
				Множитель12 = 7;
			ИначеЕсли Н = 3 Тогда
				Множитель11 = 4;
				Множитель12 = 2;
			ИначеЕсли Н = 4 Тогда
				Множитель11 = 10;
				Множитель12 = 4;
			ИначеЕсли Н = 5 Тогда
				Множитель11 = 3;
				Множитель12 = 10;
			ИначеЕсли Н = 6 Тогда
				Множитель11 = 5;
				Множитель12 = 3;
			ИначеЕсли Н = 7 Тогда
				Множитель11 = 9;
				Множитель12 = 5;
			ИначеЕсли Н = 8 Тогда
				Множитель11 = 4;
				Множитель12 = 9;
			ИначеЕсли Н = 9 Тогда
				Множитель11 = 6;
				Множитель12 = 4;
			ИначеЕсли Н = 10 Тогда
				Множитель11 = 8;
				Множитель12 = 6;
			ИначеЕсли Н = 11 Тогда
				Множитель11 = 0;
				Множитель12 = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
			КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;
			
		КонецЦикла; 
		
		КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
		КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;
		
		Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1))
			ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	Иначе		
		Возврат Ложь;		
	КонецЕсли; 	
	Возврат Истина;	
КонецФункции

// Параметры:
// КПП - строка - проверяемый код причины постановки на учет
Функция КППСоответствуетТребованиям(Знач КПП) Экспорт
	
	Если НЕ _ТолькоЦифрыВСтроке(КПП) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(СтрЗаменить(Строка(КПП), "0", "1")) <> 9 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//Проверяет номер страхового свидетельства на соответствие требованиям ПФР
Функция СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомер) Экспорт
	
	Результат = Истина;
	
	СтрокаЦифр=СтрЗаменить(Лев(СтраховойНомер,11),"-","");
	
	Если ПустаяСтрока(СтрокаЦифр) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		П1 = Число(СтрокаЦифр);	
		КонтрольноеЧисло=Число(Прав(СтраховойНомер,2));
	Исключение
		Возврат Ложь;
	КонецПопытки; 
	
	Если Число(Лев(СтрокаЦифр,9)) > 1001998 Тогда
		Всего=0;
		Для Сч = 1 По 9 Цикл
			Всего=Всего+Число(Сред(СтрокаЦифр,10-Сч,1))*Сч
		КонецЦикла;
		Остаток=Всего%101;
		Остаток=?(Остаток=100,0,Остаток);
		Если Остаток<>КонтрольноеЧисло Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция НормализацияТелефонов(ИсхСтр) Экспорт
	
	ИсхСтр = СокрЛП(ИсхСтр);			
	РезСтр = "";			
	Если ИсхСтр <> "" Тогда			
		
		Для Инд = 1 По СтрДлина(ИсхСтр) Цикл		
			Симв = Сред(ИсхСтр, Инд, 1);	
			Если Найти("0123456789", Симв) = 0 Тогда	
				Продолжить;
			КонецЕсли;	
			РезСтр = РезСтр + Симв;	
		КонецЦикла;		
		
		Если СтрДлина(РезСтр) = 10 Тогда		
			РезСтр = "+7" + РезСтр;	
		КонецЕсли;		
		
		Если СтрДлина(РезСтр) = 11 И Лев(РезСтр, 1) = "8" ИЛИ Лев(РезСтр, 1) = "7" Тогда		
			РезСтр = "+7" + Сред(РезСтр,2);	
		КонецЕсли;			
		
		Если РезСтр <> ИсхСтр И СтрДлина(РезСтр) = 12 Тогда				
			//+79165532868	
			РезСтр = Сред(РезСтр,1,2) + " (" + Сред(РезСтр,3,3) + ") " +  Сред(РезСтр,6,3) + "-"  +  Сред(РезСтр,9,2)  + "-"  +   Сред(РезСтр,11,2);	
		КонецЕсли;		
		
	КонецЕсли;			
	
	Возврат РезСтр;
	
КонецФункции // ()


Функция НайтиПоНавигационнымССылкам(МассивЭлементов) Экспорт
	
	М = Новый Массив;
	
	Если ТипЗнч(МассивЭлементов) = Тип("СписокЗначений") Тогда
		МассивЭлементов = МассивЭлементов.ВыгрузитьЗначения();
	КонецЕсли;
	
	Если ТипЗнч(МассивЭлементов) = Тип("Массив") Тогда
		
		Для каждого НС  Из МассивЭлементов Цикл
			
			ПерваяТочка = Найти(НС, "e1cib/data/");
			ВтораяТочка = Найти(НС, "?ref=");
			
			ПредставлениеТипа   = Сред(НС, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
			ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
			ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НС, ВтораяТочка + 5));
			Ссылка = ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
			М.Добавить(Ссылка);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат М;
	
КонецФункции; 

#КонецОбласти

//pesenkov--



обРежимВнешнейОбработки = Не Метаданные.Обработки.Содержит(Метаданные());

обИмяВременногоФайла = КаталогВременныхФайлов() + "query_temp.sel";
обПредставлениеВременногоФайла =  "Из кэша (" + обИмяВременногоФайла + ")";
обОтладкаВнешнегоЗапроса = Ложь;
КэшСконвертированныхОбъектов = Новый Соответствие;