&НаКлиенте
Перем ТекДанные,мПутьКОбработке;
&НаКлиенте
Процедура Сохранить(Команда)
	// Вставить содержимое обработчика.
	ТекДанные.ЗначениеПараметра = СписокЗначений.Скопировать();
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	мПутьКОбработке = ВладелецФормы.мПутьКОбработке;
	ТекДанные = ВладелецФормы.ПараметрыЗапроса.НайтиПоИдентификатору(ВладелецФормы.Элементы.ПараметрыЗапроса.ТекущаяСтрока);
	Массив = ТекДанные.ДопустимыеТипы.Типы();
	Если Массив.Количество()>0 Тогда
		СписокЗначений.ТипЗначения = ТекДанные.ДопустимыеТипы;
	КонецЕсли;
	Если ТипЗнч(ТекДанные.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
		СписокЗначений = ТекДанные.ЗначениеПараметра.Скопировать();
		Если СписокЗначений.Количество()>0 Тогда
			Массив.Добавить(ТипЗнч(СписокЗначений[0].Значение));
		КонецЕсли;
	Иначе	
		Если ЗначениеЗаполнено(ТекДанные.ЗначениеПараметра) Тогда
			СписокЗначений.Добавить(ТекДанные.ЗначениеПараметра);
		КонецЕсли;
		Массив.Добавить(ТипЗнч(ТекДанные.ЗначениеПараметра));
	КонецЕсли;	
	ТипЗначенияПараметра = ТекДанные.ДопустимыеТипы;
	ЭтаФорма.Заголовок = "Список значений параметра " + ТекДанные.ИмяПараметра;
	УстановитьКомандуПодбора(ТипЗначенияПараметра.Типы().Количество()=1);
	СписокЗначенийЗначениеПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКомандуПодбора(ВыбранТип)
	
	Элементы.СписокЗначенийКоманднаяПанель.ПодчиненныеЭлементы.Найти("СписокЗначенийПодборПольз").Видимость = НЕ ВыбранТип;
	Элементы.СписокЗначенийКоманднаяПанель.ПодчиненныеЭлементы.Найти("СписокЗначенийПодбор").Видимость = ВыбранТип;
	//Элементы.СписокЗначенийКоманднаяПанель.ПодчиненныеЭлементы.Найти("ВыбратьТип").Видимость = ВыбранТип;
	
КонецПроцедуры // УстановитьКомандуПодбора()


&НаКлиенте
Процедура СписокЗначенийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НЕ НоваяСтрока ИЛИ Копирование Тогда Возврат КонецЕсли;
	
	НовСтрока = СписокЗначений.НайтиПоИдентификатору(Элементы.СписокЗначений.ТекущаяСтрока);
	НовСтрока.Значение = ТипЗначенияПараметра.ПривестиЗначение();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСовместимость82(ИмяОткрываемойФормы,СтруктураПараметров = Неопределено,МодульРезультата = "") Экспорт
	
	Если ВладелецФормы.ВладелецФормы.Это82() Тогда
		Результат = ОткрытьФормуМодально(ИмяОткрываемойФормы,СтруктураПараметров,ЭтаФорма);
		Если МодульРезультата <> "" Тогда
			Выполнить(МодульРезультата+"(Результат,Неопределено)");
		КонецЕсли;
	Иначе
		Если МодульРезультата <> "" Тогда
			ОписаниеОповещения = Неопределено;
			Выполнить("ОписаниеОповещения = Новый ОписаниеОповещения(МодульРезультата,ЭтаФорма)");
			Выполнить("ОткрытьФорму(ИмяОткрываемойФормы,СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
		Иначе
			Выполнить("ОткрытьФорму(ИмяОткрываемойФормы,СтруктураПараметров,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры // ОткрытьФормуСовместимость82()

&НаКлиенте
Процедура НачалоВыбораЗавершение(Результат,ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Данные = СписокЗначений.НайтиПоИдентификатору(Элементы.СписокЗначений.ТекущаяСтрока);
		Данные.Значение = Результат;
	КонецЕсли;
КонецПроцедуры // НачалоВыбораЗавершение()

&НаКлиенте
Процедура СписокЗначенийЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Элементы.СписокЗначенийЗначение.ВыбиратьТип = Элементы.СписокЗначений.ТекущиеДанные.Значение = Неопределено;
	Если Элементы.СписокЗначенийЗначение.ВыбиратьТип Тогда
		ПараметрыИсходящие = Новый Структура("ВыбираемыеТипы",ТипЗначенияПараметра);
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуСовместимость82(мПутьКОбработке+".ВыборТипаУпр",ПараметрыИсходящие,"НачалоВыбораЗавершение");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	//Если вызывается, значит тип не выбран
	ПараметрыИсходящие = Новый Структура("ВыбираемыеТипы",ТипЗначенияПараметра);
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ВыборТипаУпр",ПараметрыИсходящие,"ВыбранТипДляПодбора");
	СписокЗначенийЗначениеПриИзменении(Неопределено);
КонецПроцедуры    

&НаКлиенте
Процедура ВыбранТипДляПодбора(Результат,ДополнительныеПараметры) Экспорт
	Если Результат<>Неопределено Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Результат));
		СписокЗначений.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		УстановитьКомандуПодбора(Истина);
		Элементы.СписокЗначенийКоманднаяПанель.ПодчиненныеЭлементы.Найти("СписокЗначенийПодбор")
	КонецЕсли;
КонецПроцедуры // ВыбранТипДляПодбора()

//Ал++
&НаСервере
Процедура ВставитьИзБуфераНаСервере(Адрес)
	
	Буфер = ПолучитьИзВременногоХранилища(Адрес);
	
	Текст = СокрЛП(Буфер);
	
	СписокЗн = Новый СписокЗначений;
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст,Символы.ПС);
	Для НомерСтроки = 0 По МассивСтрок.Количество()-1 Цикл
		Стр= МассивСтрок[НомерСтроки];
		Стр= СтрЗаменить(Стр,Символы.ВК,"");
		Стр= СтрЗаменить(Стр,Символы.ВТаб,"");
		Стр= СтрЗаменить(Стр,Символы.НПП,"");
		Стр= СтрЗаменить(Стр,Символы.Таб,"");
		Стр= СтрЗаменить(Стр,Символы.ПФ,"");
		Если ЗначениеЗаполнено(Стр) Тогда
			НоваяСтрока = СписокЗн.Добавить();
			НоваяСтрока.Значение = Стр;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗначенияПараметра.Типы().Количество() > 0 Тогда
		Если Строка(ТипЗначенияПараметра.Типы()[0]) = "Дата" Тогда
			Для каждого стр Из СписокЗн Цикл 
				СписокЗначений.Добавить(ДатаИзСтроки(стр));
			КонецЦикла;
		ИначеЕсли Строка(ТипЗначенияПараметра.Типы()[0]) = "Число" Тогда
			Для каждого стр Из СписокЗн Цикл 
				СписокЗначений.Добавить(ЧислоИзСтроки(стр));
			КонецЦикла;
		ИначеЕсли Строка(ТипЗначенияПараметра.Типы()[0]) = "Строка" Тогда
			Для каждого стр Из СписокЗн Цикл 
				СписокЗначений.Добавить(СокрЛП(стр));
			КонецЦикла;
		ИначеЕсли НЕ Метаданные.НайтиПоТипу(ТипЗначенияПараметра.Типы()[0]) = Неопределено Тогда	
			ИмяОбъекта = Метаданные.НайтиПоТипу(ТипЗначенияПараметра.Типы()[0]).Имя;
			Если СписокЗн.Количество() > 0 Тогда
				Если СтрДлина(СписокЗн[0]) = СтрДлина(СписокЗн[СписокЗн.Количество()-1]) Тогда
					ПреобразоватьИзУникальногоИдентификатораНаСервере(ИмяОбъекта, СписокЗн);
				Иначе
					ПреобразоватьИзНаименованияНаСервере(ИмяОбъекта, СписокЗн);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Для каждого стр Из СписокЗн Цикл 
			СписокЗначений.Добавить(СокрЛП(стр));
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДатаИзСтроки(ДатаСтрокой)
	
	СтрДата = Лев(ДатаСтрокой, 10);
	СтрВремя = Прав(ДатаСтрокой, 8);
	
	Год = Число(Прав(СтрДата, 4));
	Месяц = Число(Сред(СтрДата, 4, 2));
	День = Число(Лев(СтрДата, 2));
	
	Час = Число(Лев(СтрВремя, 2));
	Минута = Число(Сред(СтрВремя, 4, 2));
	Секунда = Число(Прав(СтрВремя, 2));
	
	Попытка
		Возврат Дата(Год, Месяц, День, Час, Минута, Секунда);
	Исключение
		Возврат Дата(0, 0, 0);
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ЧислоИзСтроки(стр)
	
	стр = СокрЛП(стр);	
	стр = СтрЗаменить(стр," ","");
	стр = СтрЗаменить(стр," ","");
	стр = СтрЗаменить(стр,Символы.НПП,"");
	стр = СтрЗаменить(стр,",",".");
	
	Числа = "0123456789.,";
	йй ="";
	Для сч = 1 По СтрДлина(стр) Цикл
		й =  Сред(стр,сч,1);
		Если Найти(Числа,й) > 0 Тогда
			йй = йй + й;
		Иначе
			йй ="";
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		Возврат Число(йй);
	Исключение
		Возврат 0;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьИзНаименованияНаСервере(ИмяОбъекта, пСписокЗначений)
	
	СписокЗначений.Очистить();
	
	ЭтоПредставление = СтрНайти(пСписокЗначений[0].Значение,"(") > 0 И СтрНайти(пСписокЗначений[0].Значение,") ") > 0;
	
	ЕстьНаименованиеПолное = Ложь;
	Попытка
		стр = Метаданные.Справочники[ИмяОбъекта].Реквизиты["НаименованиеПолное"];
		ЕстьНаименованиеПолное = Истина;
	Исключение	 
	КонецПопытки;
	
	ЕстьПолноеНаименование = Ложь;
	Попытка
		стр = Метаданные.Справочники[ИмяОбъекта].Реквизиты["ПолноеНаименование"];
		ЕстьПолноеНаименование = Истина;
	Исключение	 
	КонецПопытки;
	
	ЕстьИНН = Ложь;
	Если ИмяОбъекта = "Контрагенты" ИЛИ ИмяОбъекта = "ФизическиеЛица" Тогда
		Попытка
			стр = Метаданные.Справочники[ИмяОбъекта].Реквизиты["ИНН"];
			ЕстьИНН = Истина;
		Исключение	 
		КонецПопытки;
	КонецЕсли;
	
	ЕстьКод = Ложь;
	Попытка
		стр = Метаданные.Справочники[ИмяОбъекта].ДлинаКода > 0;
		ЕстьКод = Истина;
	Исключение	 
	КонецПопытки;
	
	ЕстьНаименование = Ложь;
	Попытка
		стр = Метаданные.Справочники[ИмяОбъекта].ДлинаНаименования > 0;
		ЕстьНаименование = Истина;
	Исключение	 
	КонецПопытки;
			
	Запрос = Новый Запрос;
	Если ИмяОбъекта = "Контрагенты" И ЭтоПредставление Тогда
		
		//Представление = "(" + Данные.ИНН + ") " + Данные.Наименование;  //Контрагенты
		
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	""("" + Контрагенты.ИНН + "") "" + Контрагенты.Наименование В (&Наименование)";
		
	ИначеЕсли ИмяОбъекта = "Контрагенты" И ЭтоПредставление Тогда
		
		//Представление = "(" + Данные.КПП + ") " + Данные.Наименование;  //ПодразделенияОрганизаций
		
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	""("" + ПодразделенияОрганизаций.КПП + "") "" + ПодразделенияОрганизаций.Наименование В (&Наименование)";
		
	ИначеЕсли ЕстьНаименование И НЕ ЕстьКод Тогда
		
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование В(&Наименование)";
		
	ИначеЕсли НЕ ЕстьНаименование И ЕстьКод Тогда
		
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ

		|	Номенклатура.Код В(&Наименование)";
		
	ИначеЕсли ЕстьНаименование И ЕстьКод Тогда
		
		ЗапросТекст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование В(&Наименование)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Код В(&Наименование)";
		
	КонецЕсли;
	
	Если ЕстьНаименованиеПолное И НЕ ЭтоПредставление Тогда
		
		ЗапросТекст = ЗапросТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.НаименованиеПолное В(&Наименование)";
		
	КонецЕсли;
	
	Если ЕстьПолноеНаименование И НЕ ЭтоПредставление Тогда
		
		ЗапросТекст = ЗапросТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ПолноеНаименование В(&Наименование)";
		
	КонецЕсли;
	
	Если ЕстьИНН И НЕ ЭтоПредставление Тогда
		
		ЗапросТекст = ЗапросТекст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ИНН В(&Наименование)";
		
	КонецЕсли;
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст,"Номенклатура",ИмяОбъекта);
	Запрос.Текст = ЗапросТекст;
	Запрос.УстановитьПараметр("Наименование", пСписокЗначений);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Свернуть("Ссылка");
	Для каждого стр Из РезультатЗапроса Цикл
		СписокЗначений.Добавить(стр.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьИзБуфера(Команда)
	
	Текст = "";
	ОбъектБуфер = Новый COMОбъект("htmlfile");
	Буфер = ОбъектБуфер.ParentWindow.ClipboardData.Getdata("Text");
	Адрес = ПоместитьВоВременноеХранилище(Буфер, ЭтаФорма.УникальныйИдентификатор);
	ВставитьИзБуфераНаСервере(Адрес);
			
	СписокЗначенийЗначениеПриИзменении(Неопределено);

КонецПроцедуры

&НаСервере
Функция СохранитьСписокВФайлНаСервере()
	
	ИмяТемпФайла = ПолучитьИмяВременногоФайла();
			
	//ЗначениеВФайл(ИмяТемпФайла,СписокЗначений);
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Т = ОбъектОбработка.СериализаторJSON(СписокЗначений);
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.УстановитьТекст(Т);
	ТекстовыйФайл.Записать(ИмяТемпФайла);
	ДвоичныеДанныеВложения = Новый ДвоичныеДанные(ИмяТемпФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанныеВложения);
	
	Файл = Новый Файл(ИмяТемпФайла);
	Если Файл.Существует() Тогда
		Попытка
			УдалитьФайлы(ИмяТемпФайла);
		Исключение
		КонецПопытки;
		
	КонецЕсли; 
	
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура СохранитьСписокВФайл(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Фильтр = "Файл данных (*.txt)|*.txt";
	ДиалогВыбораФайла.Расширение = "txt";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("СохранитьСписокВФайлЗавершение", ЭтаФорма, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла))); 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСписокВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ФайлВХранилище = СохранитьСписокВФайлНаСервере();
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлВХранилище);
		ДвоичныеДанные.Записать(ДиалогВыбораФайла.ПолноеИмяФайла); 
		ПоказатьОповещениеПользователя("Данные сохранены",,"Выполнено сохранение данных в файл "+ДиалогВыбораФайла.ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокИзФайлаНаСервере(ФайлВХранилище)
	
	СписокЗначений.Очистить();
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлВХранилище);
	ИмяТемпФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяТемпФайла); 
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.Прочитать(ИмяТемпФайла);
	Т = ТекстовыйФайл.ПолучитьТекст();
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Если Найти(Т,"""#type"": ""jv8:ValueListType"",") > 0 ИЛИ Найти(Т,"""#type"": ""jv8:ValueTable"",") > 0 Тогда
		ТЗ = ОбъектОбработка.ДесерилизаторJSON(Т);
	ИначеЕсли Найти(Т,"4772b3b4-f4a3-49c0-a1a5-8cb5961511a3") > 0 ИЛИ 
		Найти(Т,"acf6192e-81ca-46ef-93a6-5a6968b78663") > 0 ИЛИ
		Найти(Т,"51e7a0d2-530b-11d4-b98a-008048da3034") > 0 Тогда
		ОшибкиПреобразования = Ложь;
		Попытка
			ТЗ = ЗначениеИзФайла(ИмяТемпФайла);
		Исключение
			ОшибкиПреобразования = Истина;
		КонецПопытки;
		
		Если ОшибкиПреобразования Тогда
			Попытка
				СоответствиеЗамены = ОбъектОбработка.ПолучитьСоответствиеЗамены();
				Для каждого стр Из СоответствиеЗамены Цикл
					Т = СтрЗаменить(Т,"_" + стр.Имя,Лев(стр.Значение,36));
					Т = СтрЗаменить(Т,стр.Имя,стр.Значение);
				КонецЦикла;
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		Для Индекс = 1 По ТекстовыйФайл.КоличествоСтрок() Цикл
			СписокЗначений.Добавить(ТекстовыйФайл.ПолучитьСтроку(Индекс));
		КонецЦикла;
	КонецЕсли;
		
	Если ТипЗнч(ТЗ) = Тип("Массив") Тогда
		СписокЗначений.ЗагрузитьЗначения(ТЗ);
	ИначеЕсли ТипЗнч(ТЗ) = Тип("СписокЗначений") Тогда
		СписокЗначений = ТЗ;
	ИначеЕсли ТипЗнч(ТЗ) = Тип("ТаблицаЗначений") Тогда
		Колонки = ТЗ.Колонки;
		Колонка = Колонки.Найти("Значение");
		Если Колонка = Неопределено Тогда
			Колонка = Колонки[0];
		КонецЕсли; 
		М = ТЗ.ВыгрузитьКолонку(Колонка);
		СписокЗначений.ЗагрузитьЗначения(М);
	КонецЕсли;
	
	Файл = Новый Файл(ИмяТемпФайла);
	Если Файл.Существует() Тогда
		Попытка
			УдалитьФайлы(ИмяТемпФайла);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписокИзФайла(Адрес)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = "Файл данных (*.txt)|*.txt";
	ДиалогВыбораФайла.Расширение = "txt";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра = 0;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Файл = Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла);
		Адрес = ПоместитьВоВременноеХранилище(Файл, ЭтаФорма.УникальныйИдентификатор);
		ЗагрузитьСписокИзФайлаНаСервере(Адрес);
		ПоказатьОповещениеПользователя("Данные загружены",,"Выполнена загрузка данных из файла "+ДиалогВыбораФайла.ПолноеИмяФайла);
	КонецЕсли;
	
	СписокЗначенийЗначениеПриИзменении(Неопределено);

КонецПроцедуры


&НаСервере
Функция ИмяОбъектаПоТипуДляЗапроса(ИмяОбъекта,СтрокаGUID)
	
	СсылкаНаОбъект = "";
	Попытка
		НовыйGUID = Новый УникальныйИдентификатор(СтрокаGUID);
	Исключение
		Возврат СтрокаGUID;
	КонецПопытки;
	
	Попытка
		СсылкаНаОбъект = Справочники[ИмяОбъекта].ПолучитьСсылку(НовыйGUID);	
		Возврат СсылкаНаОбъект;
	Исключение
	КонецПопытки;
	Попытка
		СсылкаНаОбъект = Документы[ИмяОбъекта].ПолучитьСсылку(НовыйGUID);	
		Возврат СсылкаНаОбъект;
	Исключение
	КонецПопытки;
	
	Возврат СтрокаGUID;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьИзУникальногоИдентификатораНаСервере(ИмяОбъекта, знач пСписокЗначений)
	
	СписокЗначений.Очистить();
	
	Для каждого стр Из пСписокЗначений Цикл                                              
		
		СтрокаGUID = стр.Значение;
		
		Если СтрДлина(СтрокаGUID) <> 36 Тогда
			
			СтрокаGUID = СтрЗаменить(СтрокаGUID,"<Объект не найден> (","");
			СтрокаGUID = СтрЗаменить(СтрокаGUID,")","");
			СтрокаGUID = СтрЗаменить(СтрокаGUID,"0x","");
			СтрокаGUID = Сред(СтрокаGUID, Найти(СтрокаGUID,":")+1, СтрДлина(СтрокаGUID));
			СтрокаGUID = Сред(СтрокаGUID,25,8)+"-"+Сред(СтрокаGUID,21,4)+"-"+Сред(СтрокаGUID,17,4)+"-"+Сред(СтрокаGUID,1,4)+"-"+Сред(СтрокаGUID,5,12);				
			
		КонецЕсли;	
		
		Если СтрДлина(СтрокаGUID) <> 36 Тогда	
			Продолжить;
		КонецЕсли;
		
		СписокЗначений.Добавить(ИмяОбъектаПоТипуДляЗапроса(ИмяОбъекта,СтрокаGUID));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьИзУникальногоИдентификатора(Команда)
	
	ИмяОбъекта = "";
	
	Если СписокЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПреобразоватьИзУникальногоИдентификатораЗавершение", ЭтаФорма, Новый Структура("ИмяОбъекта", ИмяОбъекта)), ИмяОбъекта,"Введите тип объекта",Тип("Строка"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьИзУникальногоИдентификатораЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	ИмяОбъекта = ?(Значение = Неопределено, ДополнительныеПараметры.ИмяОбъекта, Значение);
		
	Если НЕ (Значение <> Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ПреобразоватьИзУникальногоИдентификатораНаСервере(ИмяОбъекта,СписокЗначений);
	
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗначенийЗначениеПриИзменении(Элемент)
	Элементы.ВсегоКоличество.Заголовок = "Всего количество: " + СписокЗначений.Количество();
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьИзСсылкиНаСервере()
	
	м = Новый Массив;
	Для сч = 0 По СписокЗначений.Количество() - 1 Цикл
		зн = СписокЗначений[сч].Значение;
		Если Лев(зн,11) = "e1cib/data/" Тогда
			Попытка							
				ПерваяТочка = Найти(зн, "e1cib/data/");
				ВтораяТочка = Найти(зн, "?ref=");
				ПредставлениеТипа   = Сред(зн, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
				ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
				Ссылка = ЗначениеИзСтрокиВнутр((СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(зн, ВтораяТочка + 5))));
				м.Добавить(Ссылка);
			Исключение
			КонецПопытки;
		КонецЕсли
	КонецЦикла; 
	
	СписокЗначений.Очистить();
	СписокЗначений.ЗагрузитьЗначения(м);
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьИзСсылки(Команда)
	ПреобразоватьИзСсылкиНаСервере();
КонецПроцедуры

//******Отладить кривые ссылки**********

&НаКлиенте
Процедура ПреобразоватьИзПредставления(Команда)
	
	ДокументыКОбработке = Новый Массив;
	
	Фабрика = ПостроитьФабрикуXDTO(".*\sот\s\d{2}\.\d{2}.\d{4}\s\d{1,2}:\d{2}:\d{2}");
	
	Для Каждого ДокументСтрокой ИЗ СписокЗначений Цикл
		Если СокрЛП(ДокументСтрокой) = "" тогда
			Продолжить;
		КонецЕсли;
		ДокументСтрокойСЛП = СокрЛП(ДокументСтрокой);
		Если ПроверитьПредставление(Фабрика,ДокументСтрокойСЛП) тогда
			ДокументыКОбработке.Добавить(ДокументСтрокойСЛП);
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Строка """+ДокументСтрокойСЛП+""" не выглядит как представление документа";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;
	
	МассивДокументов = ОбработатьДокументыСервер(ДокументыКОбработке);
	СписокЗначений.Очистить();
	Для каждого сч Из МассивДокументов Цикл
		СписокЗначений.Добавить(сч);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПостроитьФабрикуXDTO(Фасет)
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(
	"<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
	|<package targetNamespace=""sample-my-package"">
	|<valueType name=""testtypes"" base=""xs:string"">
	|<pattern>" + Фасет + "</pattern>
	|</valueType>
	|<objectType name=""TestObj"">
	|<property xmlns:d4p1=""sample-my-package"" name=""TestItem"" type=""d4p1:testtypes""/>
	|</objectType>
	|</package>
	|</Model>");
	
	Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
	МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
	Пакет = МояФабрикаXDTO.Пакеты.Получить("sample-my-package");
	Тест = МояФабрикаXDTO.Создать(Пакет.Получить("TestObj"));
	
	Возврат Тест;
КонецФункции

&НаКлиенте
Функция ПроверитьСтроку(Фабрика, Строка)
	Попытка
		Фабрика.TestItem = Строка;
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ПроверитьПредставление(Фабрика, ДокументСтрокой)
	Возврат ПроверитьСтроку(Фабрика,ДокументСтрокой);
КонецФункции

&НаСервере
Функция ПолучитьТЗМетаданныхДокументов()
	КвалификаторыСтроки = Новый КвалификаторыСтроки(250);
	ОписаниеСтроки = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
	
	КвалификаторыЧисла = Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный);
	ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	
	ТЗМетаданные = Новый ТаблицаЗначений;
	ТЗМетаданные.Колонки.Добавить("Имя", ОписаниеСтроки);
	ТЗМетаданные.Колонки.Добавить("Синоним", ОписаниеСтроки);
	ТЗМетаданные.Колонки.Добавить("Вес", ОписаниеЧисла);
	
	Для Каждого ЭлементМетаданных ИЗ Метаданные.Документы Цикл
		НС = ТЗМетаданные.Добавить();
		ЗаполнитьЗначенияСвойств(НС,ЭлементМетаданных);
		НС.Вес = СтрДлина(ЭлементМетаданных.Синоним);
		Если ЗначениеЗаполнено(ЭлементМетаданных.ПредставлениеОбъекта) Тогда
			НС.Синоним = ЭлементМетаданных.ПредставлениеОбъекта;
		КонецЕсли;
	КонецЦикла;
	
	ТЗМетаданные.Сортировать("Вес Убыв,Синоним");
	Возврат ТЗМетаданные;
КонецФункции
//Тут всё просто - пробежались по метаданным документов, собрали все синонимы и имена документов и отсортировали по убыванию длины строки. Большой соблазн сразу разбить строку представления по " от ", но бывают синонимы документов, которые содержат " от " в своем тексте, например "Приход товаров от поставщика 1 от 03.05.2018 00:00:00". Поэтому искать будем от максимальной длины строки. Кто-то может захотеть искать последний " от " в представлении, но мне захотелось так.

//Ну и, наконец, собираем всё в кучку:

//Возвращает документ по имени, номеру и дате
&НаСервере
Функция ВернутьДок(Имя,НомерДок,ДатаДок)
	Возврат Документы[Имя].НайтиПоНомеру(НомерДок,ДатаДок);
КонецФункции

&НаСервере
Функция ОбработатьДокументыСервер(СписокПредставлений)
	//Построили ТЗ синонимов и имен документов
	ТЗМетаданных = ПолучитьТЗМетаданныхДокументов();
	МассивСсылок = Новый Массив; ///Пустой массив результата
	//Для каждой строки из списка представлений
	Для Каждого ПредставлениеДок ИЗ СписокПредставлений Цикл
		//Пробегаем по имеющимся синонимам метаданных от самых длинных
		//Тут, конечно, можно покопаться с грязной строкой и не бегать
		//по ТЗ синонимов, а получить просто отбором, но мне лень
		Для Каждого ШаблонПоиска ИЗ ТЗМетаданных Цикл
			//и прикладываем к имеющейся "грязной" строке документа
			Если Найти(ПредставлениеДок,ШаблонПоиска.Синоним) Тогда
				//Если нашли - исключаем из неё синоним,
				//Теперь нужно получить из хвоста номер и дату
				СтрокаНомерДата = СокрЛП(СтрЗаменить(ПредставлениеДок,ШаблонПоиска.Синоним,""));
				//Разбили по " от " хвост. В первом элементе массива номер - во втором дата
				МассивНомерДата = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаНомердата," от ");
				НомерДок = СокрЛП(МассивНомерДата[0]);
				//Пересоберем дату строкой к типу Дата 1С
				СтрокаДата = СокрЛП(МассивНомерДата[1]);
				ДатаПоЭлементам = СтрЗаменить(СтрЗаменить(СтрокаДата," ",":"),".",":");
				МассивЭлементовДаты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДатаПоЭлементам,":");
				//02.06.2017 16:02:44
				// 0  1    2  3  4  5
				ДатаДок = Дата(МассивЭлементовДаты[2],МассивЭлементовДаты[1],МассивЭлементовДаты[0],
				МассивЭлементовДаты[3],МассивЭлементовДаты[4],МассивЭлементовДаты[5]);
				//Получим нужный документ	
				НайденныйДок = ВернутьДок(ШаблонПоиска.Имя,НомерДок,ДатаДок);
				Если ЗначениеЗаполнено(НайденныйДок) Тогда
					//Нашли и добавили в массив ссылок
					МассивСсылок.Добавить(НайденныйДок);
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Документ """+ПредставлениеДок+""" не найден";
					Сообщение.Сообщить();
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат МассивСсылок;
КонецФункции



